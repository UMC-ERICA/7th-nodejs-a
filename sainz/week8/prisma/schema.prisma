generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // 사용하는 DB에 맞춰 변경 가능
  url      = env("DATABASE_URL")
}



model User {
  user_id          Int               @id @default(autoincrement())
  email            String            @unique(map: "email") @db.VarChar(255)
  name             String            @db.VarChar(100)
  gender           String            @db.VarChar(15)
  birth            DateTime          @db.Date
  address          String            @db.VarChar(255)
  detailAddress    String?           @map("detail_address") @db.VarChar(255)
  phoneNumber      String            @map("phone_number") @db.VarChar(15)

  userFavorCategories UserFavorCategory[]
  reviews             Review[]
  usermission       UserMission[]
  @@map("user")
}

model FoodCategory {
  id                Int               @id @default(autoincrement())
  name              String            @db.VarChar(100)

  userFavorCategories UserFavorCategory[]

  @@map("food_category")
}

model UserFavorCategory {
  id                Int               @id @default(autoincrement())
  user              User              @relation(fields: [user_id], references: [user_id])
  user_id           Int               @map("user_id")
  foodCategory      FoodCategory      @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId    Int               @map("food_category_id")

  @@index([foodCategoryId], map: "f_category_id")
  @@index([user_id], map: "user_id")
  @@map("user_favor_category")
}

model Review {
  review_id         Int               @id @default(autoincrement())
  title             String
  content           String
  rating            Int
  user_id           Int
  user              User              @relation(fields: [user_id], references: [user_id])
}

model Mission {
  mission_id    Int     @id @default(autoincrement())
  store_id      Int?    @unique
  points        Int
  deadline      DateTime
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  store         Store?   @relation(fields: [store_id], references: [store_id])

usermission       UserMission[]
  @@map("mission")

}

model Store {
  store_id      Int     @id @default(autoincrement())
  mission_id    Int?    @unique
  store_name    String  @db.Char(50)
  category      String  @db.Char(25)
  location      String  @db.VarChar(25)
  mission       Mission? // 관계 정의 없음, Mission 모델에서만 설정
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("store")
}
model UserMission {
  user_mission_id Int    @id @default(autoincrement())
  user_id         Int
  mission_id      Int
  status          String  @db.VarChar(20)

  user    User    @relation(fields: [user_id], references: [user_id])
  mission Mission @relation(fields: [mission_id], references: [mission_id])
  @@map("USER_MISSION")
}