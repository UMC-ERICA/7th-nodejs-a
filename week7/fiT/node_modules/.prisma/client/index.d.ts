
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Restaurant
 * 
 */
export type Restaurant = $Result.DefaultSelection<Prisma.$RestaurantPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model Mission
 * 
 */
export type Mission = $Result.DefaultSelection<Prisma.$MissionPayload>
/**
 * Model Inquiry
 * 
 */
export type Inquiry = $Result.DefaultSelection<Prisma.$InquiryPayload>
/**
 * Model Alarm
 * 
 */
export type Alarm = $Result.DefaultSelection<Prisma.$AlarmPayload>
/**
 * Model AccountMission
 * 
 */
export type AccountMission = $Result.DefaultSelection<Prisma.$AccountMissionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const alarmType: {
  review: 'review',
  mission: 'mission',
  event: 'event'
};

export type alarmType = (typeof alarmType)[keyof typeof alarmType]


export const MissionStatus: {
  ongoing: 'ongoing',
  succeed: 'succeed',
  failed: 'failed'
};

export type MissionStatus = (typeof MissionStatus)[keyof typeof MissionStatus]

}

export type alarmType = $Enums.alarmType

export const alarmType: typeof $Enums.alarmType

export type MissionStatus = $Enums.MissionStatus

export const MissionStatus: typeof $Enums.MissionStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.restaurant`: Exposes CRUD operations for the **Restaurant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Restaurants
    * const restaurants = await prisma.restaurant.findMany()
    * ```
    */
  get restaurant(): Prisma.RestaurantDelegate<ExtArgs>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs>;

  /**
   * `prisma.mission`: Exposes CRUD operations for the **Mission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Missions
    * const missions = await prisma.mission.findMany()
    * ```
    */
  get mission(): Prisma.MissionDelegate<ExtArgs>;

  /**
   * `prisma.inquiry`: Exposes CRUD operations for the **Inquiry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inquiries
    * const inquiries = await prisma.inquiry.findMany()
    * ```
    */
  get inquiry(): Prisma.InquiryDelegate<ExtArgs>;

  /**
   * `prisma.alarm`: Exposes CRUD operations for the **Alarm** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alarms
    * const alarms = await prisma.alarm.findMany()
    * ```
    */
  get alarm(): Prisma.AlarmDelegate<ExtArgs>;

  /**
   * `prisma.accountMission`: Exposes CRUD operations for the **AccountMission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountMissions
    * const accountMissions = await prisma.accountMission.findMany()
    * ```
    */
  get accountMission(): Prisma.AccountMissionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Restaurant: 'Restaurant',
    Review: 'Review',
    Mission: 'Mission',
    Inquiry: 'Inquiry',
    Alarm: 'Alarm',
    AccountMission: 'AccountMission'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "account" | "restaurant" | "review" | "mission" | "inquiry" | "alarm" | "accountMission"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Restaurant: {
        payload: Prisma.$RestaurantPayload<ExtArgs>
        fields: Prisma.RestaurantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RestaurantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RestaurantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          findFirst: {
            args: Prisma.RestaurantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RestaurantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          findMany: {
            args: Prisma.RestaurantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>[]
          }
          create: {
            args: Prisma.RestaurantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          createMany: {
            args: Prisma.RestaurantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RestaurantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          update: {
            args: Prisma.RestaurantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          deleteMany: {
            args: Prisma.RestaurantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RestaurantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RestaurantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          aggregate: {
            args: Prisma.RestaurantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRestaurant>
          }
          groupBy: {
            args: Prisma.RestaurantGroupByArgs<ExtArgs>
            result: $Utils.Optional<RestaurantGroupByOutputType>[]
          }
          count: {
            args: Prisma.RestaurantCountArgs<ExtArgs>
            result: $Utils.Optional<RestaurantCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      Mission: {
        payload: Prisma.$MissionPayload<ExtArgs>
        fields: Prisma.MissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          findFirst: {
            args: Prisma.MissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          findMany: {
            args: Prisma.MissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>[]
          }
          create: {
            args: Prisma.MissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          createMany: {
            args: Prisma.MissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          update: {
            args: Prisma.MissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          deleteMany: {
            args: Prisma.MissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          aggregate: {
            args: Prisma.MissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMission>
          }
          groupBy: {
            args: Prisma.MissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MissionCountArgs<ExtArgs>
            result: $Utils.Optional<MissionCountAggregateOutputType> | number
          }
        }
      }
      Inquiry: {
        payload: Prisma.$InquiryPayload<ExtArgs>
        fields: Prisma.InquiryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InquiryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InquiryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          findFirst: {
            args: Prisma.InquiryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InquiryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          findMany: {
            args: Prisma.InquiryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>[]
          }
          create: {
            args: Prisma.InquiryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          createMany: {
            args: Prisma.InquiryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InquiryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          update: {
            args: Prisma.InquiryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          deleteMany: {
            args: Prisma.InquiryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InquiryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InquiryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          aggregate: {
            args: Prisma.InquiryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInquiry>
          }
          groupBy: {
            args: Prisma.InquiryGroupByArgs<ExtArgs>
            result: $Utils.Optional<InquiryGroupByOutputType>[]
          }
          count: {
            args: Prisma.InquiryCountArgs<ExtArgs>
            result: $Utils.Optional<InquiryCountAggregateOutputType> | number
          }
        }
      }
      Alarm: {
        payload: Prisma.$AlarmPayload<ExtArgs>
        fields: Prisma.AlarmFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlarmFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlarmFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          findFirst: {
            args: Prisma.AlarmFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlarmFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          findMany: {
            args: Prisma.AlarmFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>[]
          }
          create: {
            args: Prisma.AlarmCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          createMany: {
            args: Prisma.AlarmCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AlarmDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          update: {
            args: Prisma.AlarmUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          deleteMany: {
            args: Prisma.AlarmDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlarmUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlarmUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          aggregate: {
            args: Prisma.AlarmAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlarm>
          }
          groupBy: {
            args: Prisma.AlarmGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlarmGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlarmCountArgs<ExtArgs>
            result: $Utils.Optional<AlarmCountAggregateOutputType> | number
          }
        }
      }
      AccountMission: {
        payload: Prisma.$AccountMissionPayload<ExtArgs>
        fields: Prisma.AccountMissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountMissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountMissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountMissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountMissionPayload>
          }
          findFirst: {
            args: Prisma.AccountMissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountMissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountMissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountMissionPayload>
          }
          findMany: {
            args: Prisma.AccountMissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountMissionPayload>[]
          }
          create: {
            args: Prisma.AccountMissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountMissionPayload>
          }
          createMany: {
            args: Prisma.AccountMissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountMissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountMissionPayload>
          }
          update: {
            args: Prisma.AccountMissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountMissionPayload>
          }
          deleteMany: {
            args: Prisma.AccountMissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountMissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountMissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountMissionPayload>
          }
          aggregate: {
            args: Prisma.AccountMissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountMission>
          }
          groupBy: {
            args: Prisma.AccountMissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountMissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountMissionCountArgs<ExtArgs>
            result: $Utils.Optional<AccountMissionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AccountCountOutputType
   */

  export type AccountCountOutputType = {
    reviews: number
    inquiries: number
    alarms: number
    accountMissions: number
  }

  export type AccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | AccountCountOutputTypeCountReviewsArgs
    inquiries?: boolean | AccountCountOutputTypeCountInquiriesArgs
    alarms?: boolean | AccountCountOutputTypeCountAlarmsArgs
    accountMissions?: boolean | AccountCountOutputTypeCountAccountMissionsArgs
  }

  // Custom InputTypes
  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     */
    select?: AccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountInquiriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InquiryWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountAlarmsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlarmWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountAccountMissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountMissionWhereInput
  }


  /**
   * Count Type RestaurantCountOutputType
   */

  export type RestaurantCountOutputType = {
    reviews: number
    missions: number
  }

  export type RestaurantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | RestaurantCountOutputTypeCountReviewsArgs
    missions?: boolean | RestaurantCountOutputTypeCountMissionsArgs
  }

  // Custom InputTypes
  /**
   * RestaurantCountOutputType without action
   */
  export type RestaurantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantCountOutputType
     */
    select?: RestaurantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RestaurantCountOutputType without action
   */
  export type RestaurantCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * RestaurantCountOutputType without action
   */
  export type RestaurantCountOutputTypeCountMissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MissionWhereInput
  }


  /**
   * Count Type MissionCountOutputType
   */

  export type MissionCountOutputType = {
    accountMissions: number
  }

  export type MissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accountMissions?: boolean | MissionCountOutputTypeCountAccountMissionsArgs
  }

  // Custom InputTypes
  /**
   * MissionCountOutputType without action
   */
  export type MissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissionCountOutputType
     */
    select?: MissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MissionCountOutputType without action
   */
  export type MissionCountOutputTypeCountAccountMissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountMissionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    gender: number | null
    savepoint: number | null
    location_O: number | null
    marketing_O: number | null
    event_reception: number | null
    review_reception: number | null
    inquiry_reception: number | null
    korean_food: number | null
    japan_food: number | null
    china_food: number | null
    western_food: number | null
    chicken: number | null
    snack_food: number | null
    meat: number | null
    lunchbox: number | null
    LNS: number | null
    fastfood: number | null
    dessert: number | null
    asian_food: number | null
  }

  export type AccountSumAggregateOutputType = {
    gender: number | null
    savepoint: number | null
    location_O: number | null
    marketing_O: number | null
    event_reception: number | null
    review_reception: number | null
    inquiry_reception: number | null
    korean_food: number | null
    japan_food: number | null
    china_food: number | null
    western_food: number | null
    chicken: number | null
    snack_food: number | null
    meat: number | null
    lunchbox: number | null
    LNS: number | null
    fastfood: number | null
    dessert: number | null
    asian_food: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    password: string | null
    name: string | null
    birthday: Date | null
    address: string | null
    nickname: string | null
    email: string | null
    gender: number | null
    phone_number: string | null
    status: string | null
    inactive_date: Date | null
    created_date: Date | null
    updated_date: Date | null
    savepoint: number | null
    location_O: number | null
    marketing_O: number | null
    event_reception: number | null
    review_reception: number | null
    inquiry_reception: number | null
    korean_food: number | null
    japan_food: number | null
    china_food: number | null
    western_food: number | null
    chicken: number | null
    snack_food: number | null
    meat: number | null
    lunchbox: number | null
    LNS: number | null
    fastfood: number | null
    dessert: number | null
    asian_food: number | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    password: string | null
    name: string | null
    birthday: Date | null
    address: string | null
    nickname: string | null
    email: string | null
    gender: number | null
    phone_number: string | null
    status: string | null
    inactive_date: Date | null
    created_date: Date | null
    updated_date: Date | null
    savepoint: number | null
    location_O: number | null
    marketing_O: number | null
    event_reception: number | null
    review_reception: number | null
    inquiry_reception: number | null
    korean_food: number | null
    japan_food: number | null
    china_food: number | null
    western_food: number | null
    chicken: number | null
    snack_food: number | null
    meat: number | null
    lunchbox: number | null
    LNS: number | null
    fastfood: number | null
    dessert: number | null
    asian_food: number | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    password: number
    name: number
    birthday: number
    address: number
    nickname: number
    email: number
    gender: number
    phone_number: number
    status: number
    inactive_date: number
    created_date: number
    updated_date: number
    savepoint: number
    location_O: number
    marketing_O: number
    event_reception: number
    review_reception: number
    inquiry_reception: number
    korean_food: number
    japan_food: number
    china_food: number
    western_food: number
    chicken: number
    snack_food: number
    meat: number
    lunchbox: number
    LNS: number
    fastfood: number
    dessert: number
    asian_food: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    gender?: true
    savepoint?: true
    location_O?: true
    marketing_O?: true
    event_reception?: true
    review_reception?: true
    inquiry_reception?: true
    korean_food?: true
    japan_food?: true
    china_food?: true
    western_food?: true
    chicken?: true
    snack_food?: true
    meat?: true
    lunchbox?: true
    LNS?: true
    fastfood?: true
    dessert?: true
    asian_food?: true
  }

  export type AccountSumAggregateInputType = {
    gender?: true
    savepoint?: true
    location_O?: true
    marketing_O?: true
    event_reception?: true
    review_reception?: true
    inquiry_reception?: true
    korean_food?: true
    japan_food?: true
    china_food?: true
    western_food?: true
    chicken?: true
    snack_food?: true
    meat?: true
    lunchbox?: true
    LNS?: true
    fastfood?: true
    dessert?: true
    asian_food?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    password?: true
    name?: true
    birthday?: true
    address?: true
    nickname?: true
    email?: true
    gender?: true
    phone_number?: true
    status?: true
    inactive_date?: true
    created_date?: true
    updated_date?: true
    savepoint?: true
    location_O?: true
    marketing_O?: true
    event_reception?: true
    review_reception?: true
    inquiry_reception?: true
    korean_food?: true
    japan_food?: true
    china_food?: true
    western_food?: true
    chicken?: true
    snack_food?: true
    meat?: true
    lunchbox?: true
    LNS?: true
    fastfood?: true
    dessert?: true
    asian_food?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    password?: true
    name?: true
    birthday?: true
    address?: true
    nickname?: true
    email?: true
    gender?: true
    phone_number?: true
    status?: true
    inactive_date?: true
    created_date?: true
    updated_date?: true
    savepoint?: true
    location_O?: true
    marketing_O?: true
    event_reception?: true
    review_reception?: true
    inquiry_reception?: true
    korean_food?: true
    japan_food?: true
    china_food?: true
    western_food?: true
    chicken?: true
    snack_food?: true
    meat?: true
    lunchbox?: true
    LNS?: true
    fastfood?: true
    dessert?: true
    asian_food?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    password?: true
    name?: true
    birthday?: true
    address?: true
    nickname?: true
    email?: true
    gender?: true
    phone_number?: true
    status?: true
    inactive_date?: true
    created_date?: true
    updated_date?: true
    savepoint?: true
    location_O?: true
    marketing_O?: true
    event_reception?: true
    review_reception?: true
    inquiry_reception?: true
    korean_food?: true
    japan_food?: true
    china_food?: true
    western_food?: true
    chicken?: true
    snack_food?: true
    meat?: true
    lunchbox?: true
    LNS?: true
    fastfood?: true
    dessert?: true
    asian_food?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    password: string
    name: string
    birthday: Date
    address: string
    nickname: string
    email: string
    gender: number | null
    phone_number: string | null
    status: string | null
    inactive_date: Date | null
    created_date: Date
    updated_date: Date | null
    savepoint: number | null
    location_O: number
    marketing_O: number
    event_reception: number
    review_reception: number
    inquiry_reception: number
    korean_food: number | null
    japan_food: number | null
    china_food: number | null
    western_food: number | null
    chicken: number | null
    snack_food: number | null
    meat: number | null
    lunchbox: number | null
    LNS: number | null
    fastfood: number | null
    dessert: number | null
    asian_food: number | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    password?: boolean
    name?: boolean
    birthday?: boolean
    address?: boolean
    nickname?: boolean
    email?: boolean
    gender?: boolean
    phone_number?: boolean
    status?: boolean
    inactive_date?: boolean
    created_date?: boolean
    updated_date?: boolean
    savepoint?: boolean
    location_O?: boolean
    marketing_O?: boolean
    event_reception?: boolean
    review_reception?: boolean
    inquiry_reception?: boolean
    korean_food?: boolean
    japan_food?: boolean
    china_food?: boolean
    western_food?: boolean
    chicken?: boolean
    snack_food?: boolean
    meat?: boolean
    lunchbox?: boolean
    LNS?: boolean
    fastfood?: boolean
    dessert?: boolean
    asian_food?: boolean
    reviews?: boolean | Account$reviewsArgs<ExtArgs>
    inquiries?: boolean | Account$inquiriesArgs<ExtArgs>
    alarms?: boolean | Account$alarmsArgs<ExtArgs>
    accountMissions?: boolean | Account$accountMissionsArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>


  export type AccountSelectScalar = {
    id?: boolean
    password?: boolean
    name?: boolean
    birthday?: boolean
    address?: boolean
    nickname?: boolean
    email?: boolean
    gender?: boolean
    phone_number?: boolean
    status?: boolean
    inactive_date?: boolean
    created_date?: boolean
    updated_date?: boolean
    savepoint?: boolean
    location_O?: boolean
    marketing_O?: boolean
    event_reception?: boolean
    review_reception?: boolean
    inquiry_reception?: boolean
    korean_food?: boolean
    japan_food?: boolean
    china_food?: boolean
    western_food?: boolean
    chicken?: boolean
    snack_food?: boolean
    meat?: boolean
    lunchbox?: boolean
    LNS?: boolean
    fastfood?: boolean
    dessert?: boolean
    asian_food?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | Account$reviewsArgs<ExtArgs>
    inquiries?: boolean | Account$inquiriesArgs<ExtArgs>
    alarms?: boolean | Account$alarmsArgs<ExtArgs>
    accountMissions?: boolean | Account$accountMissionsArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
      inquiries: Prisma.$InquiryPayload<ExtArgs>[]
      alarms: Prisma.$AlarmPayload<ExtArgs>[]
      accountMissions: Prisma.$AccountMissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      password: string
      name: string
      birthday: Date
      address: string
      nickname: string
      email: string
      gender: number | null
      phone_number: string | null
      status: string | null
      inactive_date: Date | null
      created_date: Date
      updated_date: Date | null
      savepoint: number | null
      location_O: number
      marketing_O: number
      event_reception: number
      review_reception: number
      inquiry_reception: number
      korean_food: number | null
      japan_food: number | null
      china_food: number | null
      western_food: number | null
      chicken: number | null
      snack_food: number | null
      meat: number | null
      lunchbox: number | null
      LNS: number | null
      fastfood: number | null
      dessert: number | null
      asian_food: number | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reviews<T extends Account$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Account$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany"> | Null>
    inquiries<T extends Account$inquiriesArgs<ExtArgs> = {}>(args?: Subset<T, Account$inquiriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "findMany"> | Null>
    alarms<T extends Account$alarmsArgs<ExtArgs> = {}>(args?: Subset<T, Account$alarmsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findMany"> | Null>
    accountMissions<T extends Account$accountMissionsArgs<ExtArgs> = {}>(args?: Subset<T, Account$accountMissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountMissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly password: FieldRef<"Account", 'String'>
    readonly name: FieldRef<"Account", 'String'>
    readonly birthday: FieldRef<"Account", 'DateTime'>
    readonly address: FieldRef<"Account", 'String'>
    readonly nickname: FieldRef<"Account", 'String'>
    readonly email: FieldRef<"Account", 'String'>
    readonly gender: FieldRef<"Account", 'Int'>
    readonly phone_number: FieldRef<"Account", 'String'>
    readonly status: FieldRef<"Account", 'String'>
    readonly inactive_date: FieldRef<"Account", 'DateTime'>
    readonly created_date: FieldRef<"Account", 'DateTime'>
    readonly updated_date: FieldRef<"Account", 'DateTime'>
    readonly savepoint: FieldRef<"Account", 'Int'>
    readonly location_O: FieldRef<"Account", 'Int'>
    readonly marketing_O: FieldRef<"Account", 'Int'>
    readonly event_reception: FieldRef<"Account", 'Int'>
    readonly review_reception: FieldRef<"Account", 'Int'>
    readonly inquiry_reception: FieldRef<"Account", 'Int'>
    readonly korean_food: FieldRef<"Account", 'Int'>
    readonly japan_food: FieldRef<"Account", 'Int'>
    readonly china_food: FieldRef<"Account", 'Int'>
    readonly western_food: FieldRef<"Account", 'Int'>
    readonly chicken: FieldRef<"Account", 'Int'>
    readonly snack_food: FieldRef<"Account", 'Int'>
    readonly meat: FieldRef<"Account", 'Int'>
    readonly lunchbox: FieldRef<"Account", 'Int'>
    readonly LNS: FieldRef<"Account", 'Int'>
    readonly fastfood: FieldRef<"Account", 'Int'>
    readonly dessert: FieldRef<"Account", 'Int'>
    readonly asian_food: FieldRef<"Account", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account.reviews
   */
  export type Account$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Account.inquiries
   */
  export type Account$inquiriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    where?: InquiryWhereInput
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    cursor?: InquiryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * Account.alarms
   */
  export type Account$alarmsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    where?: AlarmWhereInput
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    cursor?: AlarmWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlarmScalarFieldEnum | AlarmScalarFieldEnum[]
  }

  /**
   * Account.accountMissions
   */
  export type Account$accountMissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountMission
     */
    select?: AccountMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountMissionInclude<ExtArgs> | null
    where?: AccountMissionWhereInput
    orderBy?: AccountMissionOrderByWithRelationInput | AccountMissionOrderByWithRelationInput[]
    cursor?: AccountMissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountMissionScalarFieldEnum | AccountMissionScalarFieldEnum[]
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Restaurant
   */

  export type AggregateRestaurant = {
    _count: RestaurantCountAggregateOutputType | null
    _avg: RestaurantAvgAggregateOutputType | null
    _sum: RestaurantSumAggregateOutputType | null
    _min: RestaurantMinAggregateOutputType | null
    _max: RestaurantMaxAggregateOutputType | null
  }

  export type RestaurantAvgAggregateOutputType = {
    id: number | null
  }

  export type RestaurantSumAggregateOutputType = {
    id: bigint | null
  }

  export type RestaurantMinAggregateOutputType = {
    id: bigint | null
    restaurant_name: string | null
    address: string | null
    type: string | null
    picture: string | null
    created_date: Date | null
    updated_date: Date | null
    inactive_date: Date | null
    status: string | null
    phone_number: string | null
  }

  export type RestaurantMaxAggregateOutputType = {
    id: bigint | null
    restaurant_name: string | null
    address: string | null
    type: string | null
    picture: string | null
    created_date: Date | null
    updated_date: Date | null
    inactive_date: Date | null
    status: string | null
    phone_number: string | null
  }

  export type RestaurantCountAggregateOutputType = {
    id: number
    restaurant_name: number
    address: number
    type: number
    picture: number
    created_date: number
    updated_date: number
    inactive_date: number
    status: number
    phone_number: number
    _all: number
  }


  export type RestaurantAvgAggregateInputType = {
    id?: true
  }

  export type RestaurantSumAggregateInputType = {
    id?: true
  }

  export type RestaurantMinAggregateInputType = {
    id?: true
    restaurant_name?: true
    address?: true
    type?: true
    picture?: true
    created_date?: true
    updated_date?: true
    inactive_date?: true
    status?: true
    phone_number?: true
  }

  export type RestaurantMaxAggregateInputType = {
    id?: true
    restaurant_name?: true
    address?: true
    type?: true
    picture?: true
    created_date?: true
    updated_date?: true
    inactive_date?: true
    status?: true
    phone_number?: true
  }

  export type RestaurantCountAggregateInputType = {
    id?: true
    restaurant_name?: true
    address?: true
    type?: true
    picture?: true
    created_date?: true
    updated_date?: true
    inactive_date?: true
    status?: true
    phone_number?: true
    _all?: true
  }

  export type RestaurantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Restaurant to aggregate.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Restaurants
    **/
    _count?: true | RestaurantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RestaurantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RestaurantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RestaurantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RestaurantMaxAggregateInputType
  }

  export type GetRestaurantAggregateType<T extends RestaurantAggregateArgs> = {
        [P in keyof T & keyof AggregateRestaurant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRestaurant[P]>
      : GetScalarType<T[P], AggregateRestaurant[P]>
  }




  export type RestaurantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RestaurantWhereInput
    orderBy?: RestaurantOrderByWithAggregationInput | RestaurantOrderByWithAggregationInput[]
    by: RestaurantScalarFieldEnum[] | RestaurantScalarFieldEnum
    having?: RestaurantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RestaurantCountAggregateInputType | true
    _avg?: RestaurantAvgAggregateInputType
    _sum?: RestaurantSumAggregateInputType
    _min?: RestaurantMinAggregateInputType
    _max?: RestaurantMaxAggregateInputType
  }

  export type RestaurantGroupByOutputType = {
    id: bigint
    restaurant_name: string
    address: string
    type: string | null
    picture: string | null
    created_date: Date
    updated_date: Date | null
    inactive_date: Date | null
    status: string | null
    phone_number: string | null
    _count: RestaurantCountAggregateOutputType | null
    _avg: RestaurantAvgAggregateOutputType | null
    _sum: RestaurantSumAggregateOutputType | null
    _min: RestaurantMinAggregateOutputType | null
    _max: RestaurantMaxAggregateOutputType | null
  }

  type GetRestaurantGroupByPayload<T extends RestaurantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RestaurantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RestaurantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RestaurantGroupByOutputType[P]>
            : GetScalarType<T[P], RestaurantGroupByOutputType[P]>
        }
      >
    >


  export type RestaurantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    restaurant_name?: boolean
    address?: boolean
    type?: boolean
    picture?: boolean
    created_date?: boolean
    updated_date?: boolean
    inactive_date?: boolean
    status?: boolean
    phone_number?: boolean
    reviews?: boolean | Restaurant$reviewsArgs<ExtArgs>
    missions?: boolean | Restaurant$missionsArgs<ExtArgs>
    _count?: boolean | RestaurantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["restaurant"]>


  export type RestaurantSelectScalar = {
    id?: boolean
    restaurant_name?: boolean
    address?: boolean
    type?: boolean
    picture?: boolean
    created_date?: boolean
    updated_date?: boolean
    inactive_date?: boolean
    status?: boolean
    phone_number?: boolean
  }

  export type RestaurantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | Restaurant$reviewsArgs<ExtArgs>
    missions?: boolean | Restaurant$missionsArgs<ExtArgs>
    _count?: boolean | RestaurantCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RestaurantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Restaurant"
    objects: {
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
      missions: Prisma.$MissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      restaurant_name: string
      address: string
      type: string | null
      picture: string | null
      created_date: Date
      updated_date: Date | null
      inactive_date: Date | null
      status: string | null
      phone_number: string | null
    }, ExtArgs["result"]["restaurant"]>
    composites: {}
  }

  type RestaurantGetPayload<S extends boolean | null | undefined | RestaurantDefaultArgs> = $Result.GetResult<Prisma.$RestaurantPayload, S>

  type RestaurantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RestaurantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RestaurantCountAggregateInputType | true
    }

  export interface RestaurantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Restaurant'], meta: { name: 'Restaurant' } }
    /**
     * Find zero or one Restaurant that matches the filter.
     * @param {RestaurantFindUniqueArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RestaurantFindUniqueArgs>(args: SelectSubset<T, RestaurantFindUniqueArgs<ExtArgs>>): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Restaurant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RestaurantFindUniqueOrThrowArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RestaurantFindUniqueOrThrowArgs>(args: SelectSubset<T, RestaurantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Restaurant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantFindFirstArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RestaurantFindFirstArgs>(args?: SelectSubset<T, RestaurantFindFirstArgs<ExtArgs>>): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Restaurant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantFindFirstOrThrowArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RestaurantFindFirstOrThrowArgs>(args?: SelectSubset<T, RestaurantFindFirstOrThrowArgs<ExtArgs>>): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Restaurants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Restaurants
     * const restaurants = await prisma.restaurant.findMany()
     * 
     * // Get first 10 Restaurants
     * const restaurants = await prisma.restaurant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const restaurantWithIdOnly = await prisma.restaurant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RestaurantFindManyArgs>(args?: SelectSubset<T, RestaurantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Restaurant.
     * @param {RestaurantCreateArgs} args - Arguments to create a Restaurant.
     * @example
     * // Create one Restaurant
     * const Restaurant = await prisma.restaurant.create({
     *   data: {
     *     // ... data to create a Restaurant
     *   }
     * })
     * 
     */
    create<T extends RestaurantCreateArgs>(args: SelectSubset<T, RestaurantCreateArgs<ExtArgs>>): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Restaurants.
     * @param {RestaurantCreateManyArgs} args - Arguments to create many Restaurants.
     * @example
     * // Create many Restaurants
     * const restaurant = await prisma.restaurant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RestaurantCreateManyArgs>(args?: SelectSubset<T, RestaurantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Restaurant.
     * @param {RestaurantDeleteArgs} args - Arguments to delete one Restaurant.
     * @example
     * // Delete one Restaurant
     * const Restaurant = await prisma.restaurant.delete({
     *   where: {
     *     // ... filter to delete one Restaurant
     *   }
     * })
     * 
     */
    delete<T extends RestaurantDeleteArgs>(args: SelectSubset<T, RestaurantDeleteArgs<ExtArgs>>): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Restaurant.
     * @param {RestaurantUpdateArgs} args - Arguments to update one Restaurant.
     * @example
     * // Update one Restaurant
     * const restaurant = await prisma.restaurant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RestaurantUpdateArgs>(args: SelectSubset<T, RestaurantUpdateArgs<ExtArgs>>): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Restaurants.
     * @param {RestaurantDeleteManyArgs} args - Arguments to filter Restaurants to delete.
     * @example
     * // Delete a few Restaurants
     * const { count } = await prisma.restaurant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RestaurantDeleteManyArgs>(args?: SelectSubset<T, RestaurantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Restaurants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Restaurants
     * const restaurant = await prisma.restaurant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RestaurantUpdateManyArgs>(args: SelectSubset<T, RestaurantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Restaurant.
     * @param {RestaurantUpsertArgs} args - Arguments to update or create a Restaurant.
     * @example
     * // Update or create a Restaurant
     * const restaurant = await prisma.restaurant.upsert({
     *   create: {
     *     // ... data to create a Restaurant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Restaurant we want to update
     *   }
     * })
     */
    upsert<T extends RestaurantUpsertArgs>(args: SelectSubset<T, RestaurantUpsertArgs<ExtArgs>>): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Restaurants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantCountArgs} args - Arguments to filter Restaurants to count.
     * @example
     * // Count the number of Restaurants
     * const count = await prisma.restaurant.count({
     *   where: {
     *     // ... the filter for the Restaurants we want to count
     *   }
     * })
    **/
    count<T extends RestaurantCountArgs>(
      args?: Subset<T, RestaurantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RestaurantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Restaurant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RestaurantAggregateArgs>(args: Subset<T, RestaurantAggregateArgs>): Prisma.PrismaPromise<GetRestaurantAggregateType<T>>

    /**
     * Group by Restaurant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RestaurantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RestaurantGroupByArgs['orderBy'] }
        : { orderBy?: RestaurantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RestaurantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRestaurantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Restaurant model
   */
  readonly fields: RestaurantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Restaurant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RestaurantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reviews<T extends Restaurant$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Restaurant$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany"> | Null>
    missions<T extends Restaurant$missionsArgs<ExtArgs> = {}>(args?: Subset<T, Restaurant$missionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Restaurant model
   */ 
  interface RestaurantFieldRefs {
    readonly id: FieldRef<"Restaurant", 'BigInt'>
    readonly restaurant_name: FieldRef<"Restaurant", 'String'>
    readonly address: FieldRef<"Restaurant", 'String'>
    readonly type: FieldRef<"Restaurant", 'String'>
    readonly picture: FieldRef<"Restaurant", 'String'>
    readonly created_date: FieldRef<"Restaurant", 'DateTime'>
    readonly updated_date: FieldRef<"Restaurant", 'DateTime'>
    readonly inactive_date: FieldRef<"Restaurant", 'DateTime'>
    readonly status: FieldRef<"Restaurant", 'String'>
    readonly phone_number: FieldRef<"Restaurant", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Restaurant findUnique
   */
  export type RestaurantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where: RestaurantWhereUniqueInput
  }

  /**
   * Restaurant findUniqueOrThrow
   */
  export type RestaurantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where: RestaurantWhereUniqueInput
  }

  /**
   * Restaurant findFirst
   */
  export type RestaurantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restaurants.
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restaurants.
     */
    distinct?: RestaurantScalarFieldEnum | RestaurantScalarFieldEnum[]
  }

  /**
   * Restaurant findFirstOrThrow
   */
  export type RestaurantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restaurants.
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restaurants.
     */
    distinct?: RestaurantScalarFieldEnum | RestaurantScalarFieldEnum[]
  }

  /**
   * Restaurant findMany
   */
  export type RestaurantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurants to fetch.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Restaurants.
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    distinct?: RestaurantScalarFieldEnum | RestaurantScalarFieldEnum[]
  }

  /**
   * Restaurant create
   */
  export type RestaurantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * The data needed to create a Restaurant.
     */
    data: XOR<RestaurantCreateInput, RestaurantUncheckedCreateInput>
  }

  /**
   * Restaurant createMany
   */
  export type RestaurantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Restaurants.
     */
    data: RestaurantCreateManyInput | RestaurantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Restaurant update
   */
  export type RestaurantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * The data needed to update a Restaurant.
     */
    data: XOR<RestaurantUpdateInput, RestaurantUncheckedUpdateInput>
    /**
     * Choose, which Restaurant to update.
     */
    where: RestaurantWhereUniqueInput
  }

  /**
   * Restaurant updateMany
   */
  export type RestaurantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Restaurants.
     */
    data: XOR<RestaurantUpdateManyMutationInput, RestaurantUncheckedUpdateManyInput>
    /**
     * Filter which Restaurants to update
     */
    where?: RestaurantWhereInput
  }

  /**
   * Restaurant upsert
   */
  export type RestaurantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * The filter to search for the Restaurant to update in case it exists.
     */
    where: RestaurantWhereUniqueInput
    /**
     * In case the Restaurant found by the `where` argument doesn't exist, create a new Restaurant with this data.
     */
    create: XOR<RestaurantCreateInput, RestaurantUncheckedCreateInput>
    /**
     * In case the Restaurant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RestaurantUpdateInput, RestaurantUncheckedUpdateInput>
  }

  /**
   * Restaurant delete
   */
  export type RestaurantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter which Restaurant to delete.
     */
    where: RestaurantWhereUniqueInput
  }

  /**
   * Restaurant deleteMany
   */
  export type RestaurantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Restaurants to delete
     */
    where?: RestaurantWhereInput
  }

  /**
   * Restaurant.reviews
   */
  export type Restaurant$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Restaurant.missions
   */
  export type Restaurant$missionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    where?: MissionWhereInput
    orderBy?: MissionOrderByWithRelationInput | MissionOrderByWithRelationInput[]
    cursor?: MissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MissionScalarFieldEnum | MissionScalarFieldEnum[]
  }

  /**
   * Restaurant without action
   */
  export type RestaurantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    Restaurant_id: number | null
    score: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: bigint | null
    Restaurant_id: bigint | null
    score: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: bigint | null
    Restaurant_id: bigint | null
    Account_id: string | null
    score: number | null
    picture: string | null
    content: string | null
    created_date: Date | null
    updated_date: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: bigint | null
    Restaurant_id: bigint | null
    Account_id: string | null
    score: number | null
    picture: string | null
    content: string | null
    created_date: Date | null
    updated_date: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    Restaurant_id: number
    Account_id: number
    score: number
    picture: number
    content: number
    created_date: number
    updated_date: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    Restaurant_id?: true
    score?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    Restaurant_id?: true
    score?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    Restaurant_id?: true
    Account_id?: true
    score?: true
    picture?: true
    content?: true
    created_date?: true
    updated_date?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    Restaurant_id?: true
    Account_id?: true
    score?: true
    picture?: true
    content?: true
    created_date?: true
    updated_date?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    Restaurant_id?: true
    Account_id?: true
    score?: true
    picture?: true
    content?: true
    created_date?: true
    updated_date?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: bigint
    Restaurant_id: bigint
    Account_id: string
    score: number | null
    picture: string | null
    content: string | null
    created_date: Date
    updated_date: Date | null
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Restaurant_id?: boolean
    Account_id?: boolean
    score?: boolean
    picture?: boolean
    content?: boolean
    created_date?: boolean
    updated_date?: boolean
    restaurant?: boolean | RestaurantDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>


  export type ReviewSelectScalar = {
    id?: boolean
    Restaurant_id?: boolean
    Account_id?: boolean
    score?: boolean
    picture?: boolean
    content?: boolean
    created_date?: boolean
    updated_date?: boolean
  }

  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    restaurant?: boolean | RestaurantDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      restaurant: Prisma.$RestaurantPayload<ExtArgs>
      account: Prisma.$AccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      Restaurant_id: bigint
      Account_id: string
      score: number | null
      picture: string | null
      content: string | null
      created_date: Date
      updated_date: Date | null
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    restaurant<T extends RestaurantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RestaurantDefaultArgs<ExtArgs>>): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */ 
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'BigInt'>
    readonly Restaurant_id: FieldRef<"Review", 'BigInt'>
    readonly Account_id: FieldRef<"Review", 'String'>
    readonly score: FieldRef<"Review", 'Int'>
    readonly picture: FieldRef<"Review", 'String'>
    readonly content: FieldRef<"Review", 'String'>
    readonly created_date: FieldRef<"Review", 'DateTime'>
    readonly updated_date: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model Mission
   */

  export type AggregateMission = {
    _count: MissionCountAggregateOutputType | null
    _avg: MissionAvgAggregateOutputType | null
    _sum: MissionSumAggregateOutputType | null
    _min: MissionMinAggregateOutputType | null
    _max: MissionMaxAggregateOutputType | null
  }

  export type MissionAvgAggregateOutputType = {
    id: number | null
    Restaurant_id: number | null
    count: number | null
    mission_point: number | null
  }

  export type MissionSumAggregateOutputType = {
    id: bigint | null
    Restaurant_id: bigint | null
    count: number | null
    mission_point: number | null
  }

  export type MissionMinAggregateOutputType = {
    id: bigint | null
    Restaurant_id: bigint | null
    mission_name: string | null
    deadline: Date | null
    created_date: Date | null
    updated_date: Date | null
    count: number | null
    mission_point: number | null
  }

  export type MissionMaxAggregateOutputType = {
    id: bigint | null
    Restaurant_id: bigint | null
    mission_name: string | null
    deadline: Date | null
    created_date: Date | null
    updated_date: Date | null
    count: number | null
    mission_point: number | null
  }

  export type MissionCountAggregateOutputType = {
    id: number
    Restaurant_id: number
    mission_name: number
    deadline: number
    created_date: number
    updated_date: number
    count: number
    mission_point: number
    _all: number
  }


  export type MissionAvgAggregateInputType = {
    id?: true
    Restaurant_id?: true
    count?: true
    mission_point?: true
  }

  export type MissionSumAggregateInputType = {
    id?: true
    Restaurant_id?: true
    count?: true
    mission_point?: true
  }

  export type MissionMinAggregateInputType = {
    id?: true
    Restaurant_id?: true
    mission_name?: true
    deadline?: true
    created_date?: true
    updated_date?: true
    count?: true
    mission_point?: true
  }

  export type MissionMaxAggregateInputType = {
    id?: true
    Restaurant_id?: true
    mission_name?: true
    deadline?: true
    created_date?: true
    updated_date?: true
    count?: true
    mission_point?: true
  }

  export type MissionCountAggregateInputType = {
    id?: true
    Restaurant_id?: true
    mission_name?: true
    deadline?: true
    created_date?: true
    updated_date?: true
    count?: true
    mission_point?: true
    _all?: true
  }

  export type MissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mission to aggregate.
     */
    where?: MissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Missions to fetch.
     */
    orderBy?: MissionOrderByWithRelationInput | MissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Missions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Missions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Missions
    **/
    _count?: true | MissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MissionMaxAggregateInputType
  }

  export type GetMissionAggregateType<T extends MissionAggregateArgs> = {
        [P in keyof T & keyof AggregateMission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMission[P]>
      : GetScalarType<T[P], AggregateMission[P]>
  }




  export type MissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MissionWhereInput
    orderBy?: MissionOrderByWithAggregationInput | MissionOrderByWithAggregationInput[]
    by: MissionScalarFieldEnum[] | MissionScalarFieldEnum
    having?: MissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MissionCountAggregateInputType | true
    _avg?: MissionAvgAggregateInputType
    _sum?: MissionSumAggregateInputType
    _min?: MissionMinAggregateInputType
    _max?: MissionMaxAggregateInputType
  }

  export type MissionGroupByOutputType = {
    id: bigint
    Restaurant_id: bigint
    mission_name: string
    deadline: Date | null
    created_date: Date
    updated_date: Date | null
    count: number | null
    mission_point: number | null
    _count: MissionCountAggregateOutputType | null
    _avg: MissionAvgAggregateOutputType | null
    _sum: MissionSumAggregateOutputType | null
    _min: MissionMinAggregateOutputType | null
    _max: MissionMaxAggregateOutputType | null
  }

  type GetMissionGroupByPayload<T extends MissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MissionGroupByOutputType[P]>
            : GetScalarType<T[P], MissionGroupByOutputType[P]>
        }
      >
    >


  export type MissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Restaurant_id?: boolean
    mission_name?: boolean
    deadline?: boolean
    created_date?: boolean
    updated_date?: boolean
    count?: boolean
    mission_point?: boolean
    restaurant?: boolean | RestaurantDefaultArgs<ExtArgs>
    accountMissions?: boolean | Mission$accountMissionsArgs<ExtArgs>
    _count?: boolean | MissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mission"]>


  export type MissionSelectScalar = {
    id?: boolean
    Restaurant_id?: boolean
    mission_name?: boolean
    deadline?: boolean
    created_date?: boolean
    updated_date?: boolean
    count?: boolean
    mission_point?: boolean
  }

  export type MissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    restaurant?: boolean | RestaurantDefaultArgs<ExtArgs>
    accountMissions?: boolean | Mission$accountMissionsArgs<ExtArgs>
    _count?: boolean | MissionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mission"
    objects: {
      restaurant: Prisma.$RestaurantPayload<ExtArgs>
      accountMissions: Prisma.$AccountMissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      Restaurant_id: bigint
      mission_name: string
      deadline: Date | null
      created_date: Date
      updated_date: Date | null
      count: number | null
      mission_point: number | null
    }, ExtArgs["result"]["mission"]>
    composites: {}
  }

  type MissionGetPayload<S extends boolean | null | undefined | MissionDefaultArgs> = $Result.GetResult<Prisma.$MissionPayload, S>

  type MissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MissionCountAggregateInputType | true
    }

  export interface MissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mission'], meta: { name: 'Mission' } }
    /**
     * Find zero or one Mission that matches the filter.
     * @param {MissionFindUniqueArgs} args - Arguments to find a Mission
     * @example
     * // Get one Mission
     * const mission = await prisma.mission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MissionFindUniqueArgs>(args: SelectSubset<T, MissionFindUniqueArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Mission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MissionFindUniqueOrThrowArgs} args - Arguments to find a Mission
     * @example
     * // Get one Mission
     * const mission = await prisma.mission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MissionFindUniqueOrThrowArgs>(args: SelectSubset<T, MissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Mission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionFindFirstArgs} args - Arguments to find a Mission
     * @example
     * // Get one Mission
     * const mission = await prisma.mission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MissionFindFirstArgs>(args?: SelectSubset<T, MissionFindFirstArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Mission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionFindFirstOrThrowArgs} args - Arguments to find a Mission
     * @example
     * // Get one Mission
     * const mission = await prisma.mission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MissionFindFirstOrThrowArgs>(args?: SelectSubset<T, MissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Missions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Missions
     * const missions = await prisma.mission.findMany()
     * 
     * // Get first 10 Missions
     * const missions = await prisma.mission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const missionWithIdOnly = await prisma.mission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MissionFindManyArgs>(args?: SelectSubset<T, MissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Mission.
     * @param {MissionCreateArgs} args - Arguments to create a Mission.
     * @example
     * // Create one Mission
     * const Mission = await prisma.mission.create({
     *   data: {
     *     // ... data to create a Mission
     *   }
     * })
     * 
     */
    create<T extends MissionCreateArgs>(args: SelectSubset<T, MissionCreateArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Missions.
     * @param {MissionCreateManyArgs} args - Arguments to create many Missions.
     * @example
     * // Create many Missions
     * const mission = await prisma.mission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MissionCreateManyArgs>(args?: SelectSubset<T, MissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mission.
     * @param {MissionDeleteArgs} args - Arguments to delete one Mission.
     * @example
     * // Delete one Mission
     * const Mission = await prisma.mission.delete({
     *   where: {
     *     // ... filter to delete one Mission
     *   }
     * })
     * 
     */
    delete<T extends MissionDeleteArgs>(args: SelectSubset<T, MissionDeleteArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Mission.
     * @param {MissionUpdateArgs} args - Arguments to update one Mission.
     * @example
     * // Update one Mission
     * const mission = await prisma.mission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MissionUpdateArgs>(args: SelectSubset<T, MissionUpdateArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Missions.
     * @param {MissionDeleteManyArgs} args - Arguments to filter Missions to delete.
     * @example
     * // Delete a few Missions
     * const { count } = await prisma.mission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MissionDeleteManyArgs>(args?: SelectSubset<T, MissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Missions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Missions
     * const mission = await prisma.mission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MissionUpdateManyArgs>(args: SelectSubset<T, MissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mission.
     * @param {MissionUpsertArgs} args - Arguments to update or create a Mission.
     * @example
     * // Update or create a Mission
     * const mission = await prisma.mission.upsert({
     *   create: {
     *     // ... data to create a Mission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mission we want to update
     *   }
     * })
     */
    upsert<T extends MissionUpsertArgs>(args: SelectSubset<T, MissionUpsertArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Missions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionCountArgs} args - Arguments to filter Missions to count.
     * @example
     * // Count the number of Missions
     * const count = await prisma.mission.count({
     *   where: {
     *     // ... the filter for the Missions we want to count
     *   }
     * })
    **/
    count<T extends MissionCountArgs>(
      args?: Subset<T, MissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MissionAggregateArgs>(args: Subset<T, MissionAggregateArgs>): Prisma.PrismaPromise<GetMissionAggregateType<T>>

    /**
     * Group by Mission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MissionGroupByArgs['orderBy'] }
        : { orderBy?: MissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mission model
   */
  readonly fields: MissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    restaurant<T extends RestaurantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RestaurantDefaultArgs<ExtArgs>>): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    accountMissions<T extends Mission$accountMissionsArgs<ExtArgs> = {}>(args?: Subset<T, Mission$accountMissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountMissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Mission model
   */ 
  interface MissionFieldRefs {
    readonly id: FieldRef<"Mission", 'BigInt'>
    readonly Restaurant_id: FieldRef<"Mission", 'BigInt'>
    readonly mission_name: FieldRef<"Mission", 'String'>
    readonly deadline: FieldRef<"Mission", 'DateTime'>
    readonly created_date: FieldRef<"Mission", 'DateTime'>
    readonly updated_date: FieldRef<"Mission", 'DateTime'>
    readonly count: FieldRef<"Mission", 'Int'>
    readonly mission_point: FieldRef<"Mission", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Mission findUnique
   */
  export type MissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Mission to fetch.
     */
    where: MissionWhereUniqueInput
  }

  /**
   * Mission findUniqueOrThrow
   */
  export type MissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Mission to fetch.
     */
    where: MissionWhereUniqueInput
  }

  /**
   * Mission findFirst
   */
  export type MissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Mission to fetch.
     */
    where?: MissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Missions to fetch.
     */
    orderBy?: MissionOrderByWithRelationInput | MissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Missions.
     */
    cursor?: MissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Missions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Missions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Missions.
     */
    distinct?: MissionScalarFieldEnum | MissionScalarFieldEnum[]
  }

  /**
   * Mission findFirstOrThrow
   */
  export type MissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Mission to fetch.
     */
    where?: MissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Missions to fetch.
     */
    orderBy?: MissionOrderByWithRelationInput | MissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Missions.
     */
    cursor?: MissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Missions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Missions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Missions.
     */
    distinct?: MissionScalarFieldEnum | MissionScalarFieldEnum[]
  }

  /**
   * Mission findMany
   */
  export type MissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Missions to fetch.
     */
    where?: MissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Missions to fetch.
     */
    orderBy?: MissionOrderByWithRelationInput | MissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Missions.
     */
    cursor?: MissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Missions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Missions.
     */
    skip?: number
    distinct?: MissionScalarFieldEnum | MissionScalarFieldEnum[]
  }

  /**
   * Mission create
   */
  export type MissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Mission.
     */
    data: XOR<MissionCreateInput, MissionUncheckedCreateInput>
  }

  /**
   * Mission createMany
   */
  export type MissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Missions.
     */
    data: MissionCreateManyInput | MissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mission update
   */
  export type MissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Mission.
     */
    data: XOR<MissionUpdateInput, MissionUncheckedUpdateInput>
    /**
     * Choose, which Mission to update.
     */
    where: MissionWhereUniqueInput
  }

  /**
   * Mission updateMany
   */
  export type MissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Missions.
     */
    data: XOR<MissionUpdateManyMutationInput, MissionUncheckedUpdateManyInput>
    /**
     * Filter which Missions to update
     */
    where?: MissionWhereInput
  }

  /**
   * Mission upsert
   */
  export type MissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Mission to update in case it exists.
     */
    where: MissionWhereUniqueInput
    /**
     * In case the Mission found by the `where` argument doesn't exist, create a new Mission with this data.
     */
    create: XOR<MissionCreateInput, MissionUncheckedCreateInput>
    /**
     * In case the Mission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MissionUpdateInput, MissionUncheckedUpdateInput>
  }

  /**
   * Mission delete
   */
  export type MissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter which Mission to delete.
     */
    where: MissionWhereUniqueInput
  }

  /**
   * Mission deleteMany
   */
  export type MissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Missions to delete
     */
    where?: MissionWhereInput
  }

  /**
   * Mission.accountMissions
   */
  export type Mission$accountMissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountMission
     */
    select?: AccountMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountMissionInclude<ExtArgs> | null
    where?: AccountMissionWhereInput
    orderBy?: AccountMissionOrderByWithRelationInput | AccountMissionOrderByWithRelationInput[]
    cursor?: AccountMissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountMissionScalarFieldEnum | AccountMissionScalarFieldEnum[]
  }

  /**
   * Mission without action
   */
  export type MissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
  }


  /**
   * Model Inquiry
   */

  export type AggregateInquiry = {
    _count: InquiryCountAggregateOutputType | null
    _avg: InquiryAvgAggregateOutputType | null
    _sum: InquirySumAggregateOutputType | null
    _min: InquiryMinAggregateOutputType | null
    _max: InquiryMaxAggregateOutputType | null
  }

  export type InquiryAvgAggregateOutputType = {
    id: number | null
    waiting: number | null
  }

  export type InquirySumAggregateOutputType = {
    id: number | null
    waiting: number | null
  }

  export type InquiryMinAggregateOutputType = {
    id: number | null
    Account_id: string | null
    title: string | null
    image: string | null
    content: string | null
    waiting: number | null
    created_date: Date | null
    type: string | null
  }

  export type InquiryMaxAggregateOutputType = {
    id: number | null
    Account_id: string | null
    title: string | null
    image: string | null
    content: string | null
    waiting: number | null
    created_date: Date | null
    type: string | null
  }

  export type InquiryCountAggregateOutputType = {
    id: number
    Account_id: number
    title: number
    image: number
    content: number
    waiting: number
    created_date: number
    type: number
    _all: number
  }


  export type InquiryAvgAggregateInputType = {
    id?: true
    waiting?: true
  }

  export type InquirySumAggregateInputType = {
    id?: true
    waiting?: true
  }

  export type InquiryMinAggregateInputType = {
    id?: true
    Account_id?: true
    title?: true
    image?: true
    content?: true
    waiting?: true
    created_date?: true
    type?: true
  }

  export type InquiryMaxAggregateInputType = {
    id?: true
    Account_id?: true
    title?: true
    image?: true
    content?: true
    waiting?: true
    created_date?: true
    type?: true
  }

  export type InquiryCountAggregateInputType = {
    id?: true
    Account_id?: true
    title?: true
    image?: true
    content?: true
    waiting?: true
    created_date?: true
    type?: true
    _all?: true
  }

  export type InquiryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inquiry to aggregate.
     */
    where?: InquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inquiries to fetch.
     */
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inquiries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inquiries
    **/
    _count?: true | InquiryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InquiryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InquirySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InquiryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InquiryMaxAggregateInputType
  }

  export type GetInquiryAggregateType<T extends InquiryAggregateArgs> = {
        [P in keyof T & keyof AggregateInquiry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInquiry[P]>
      : GetScalarType<T[P], AggregateInquiry[P]>
  }




  export type InquiryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InquiryWhereInput
    orderBy?: InquiryOrderByWithAggregationInput | InquiryOrderByWithAggregationInput[]
    by: InquiryScalarFieldEnum[] | InquiryScalarFieldEnum
    having?: InquiryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InquiryCountAggregateInputType | true
    _avg?: InquiryAvgAggregateInputType
    _sum?: InquirySumAggregateInputType
    _min?: InquiryMinAggregateInputType
    _max?: InquiryMaxAggregateInputType
  }

  export type InquiryGroupByOutputType = {
    id: number
    Account_id: string
    title: string | null
    image: string | null
    content: string | null
    waiting: number | null
    created_date: Date | null
    type: string | null
    _count: InquiryCountAggregateOutputType | null
    _avg: InquiryAvgAggregateOutputType | null
    _sum: InquirySumAggregateOutputType | null
    _min: InquiryMinAggregateOutputType | null
    _max: InquiryMaxAggregateOutputType | null
  }

  type GetInquiryGroupByPayload<T extends InquiryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InquiryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InquiryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InquiryGroupByOutputType[P]>
            : GetScalarType<T[P], InquiryGroupByOutputType[P]>
        }
      >
    >


  export type InquirySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Account_id?: boolean
    title?: boolean
    image?: boolean
    content?: boolean
    waiting?: boolean
    created_date?: boolean
    type?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inquiry"]>


  export type InquirySelectScalar = {
    id?: boolean
    Account_id?: boolean
    title?: boolean
    image?: boolean
    content?: boolean
    waiting?: boolean
    created_date?: boolean
    type?: boolean
  }

  export type InquiryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }

  export type $InquiryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inquiry"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Account_id: string
      title: string | null
      image: string | null
      content: string | null
      waiting: number | null
      created_date: Date | null
      type: string | null
    }, ExtArgs["result"]["inquiry"]>
    composites: {}
  }

  type InquiryGetPayload<S extends boolean | null | undefined | InquiryDefaultArgs> = $Result.GetResult<Prisma.$InquiryPayload, S>

  type InquiryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InquiryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InquiryCountAggregateInputType | true
    }

  export interface InquiryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inquiry'], meta: { name: 'Inquiry' } }
    /**
     * Find zero or one Inquiry that matches the filter.
     * @param {InquiryFindUniqueArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InquiryFindUniqueArgs>(args: SelectSubset<T, InquiryFindUniqueArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Inquiry that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InquiryFindUniqueOrThrowArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InquiryFindUniqueOrThrowArgs>(args: SelectSubset<T, InquiryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Inquiry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryFindFirstArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InquiryFindFirstArgs>(args?: SelectSubset<T, InquiryFindFirstArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Inquiry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryFindFirstOrThrowArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InquiryFindFirstOrThrowArgs>(args?: SelectSubset<T, InquiryFindFirstOrThrowArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Inquiries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inquiries
     * const inquiries = await prisma.inquiry.findMany()
     * 
     * // Get first 10 Inquiries
     * const inquiries = await prisma.inquiry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inquiryWithIdOnly = await prisma.inquiry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InquiryFindManyArgs>(args?: SelectSubset<T, InquiryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Inquiry.
     * @param {InquiryCreateArgs} args - Arguments to create a Inquiry.
     * @example
     * // Create one Inquiry
     * const Inquiry = await prisma.inquiry.create({
     *   data: {
     *     // ... data to create a Inquiry
     *   }
     * })
     * 
     */
    create<T extends InquiryCreateArgs>(args: SelectSubset<T, InquiryCreateArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Inquiries.
     * @param {InquiryCreateManyArgs} args - Arguments to create many Inquiries.
     * @example
     * // Create many Inquiries
     * const inquiry = await prisma.inquiry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InquiryCreateManyArgs>(args?: SelectSubset<T, InquiryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Inquiry.
     * @param {InquiryDeleteArgs} args - Arguments to delete one Inquiry.
     * @example
     * // Delete one Inquiry
     * const Inquiry = await prisma.inquiry.delete({
     *   where: {
     *     // ... filter to delete one Inquiry
     *   }
     * })
     * 
     */
    delete<T extends InquiryDeleteArgs>(args: SelectSubset<T, InquiryDeleteArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Inquiry.
     * @param {InquiryUpdateArgs} args - Arguments to update one Inquiry.
     * @example
     * // Update one Inquiry
     * const inquiry = await prisma.inquiry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InquiryUpdateArgs>(args: SelectSubset<T, InquiryUpdateArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Inquiries.
     * @param {InquiryDeleteManyArgs} args - Arguments to filter Inquiries to delete.
     * @example
     * // Delete a few Inquiries
     * const { count } = await prisma.inquiry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InquiryDeleteManyArgs>(args?: SelectSubset<T, InquiryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inquiries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inquiries
     * const inquiry = await prisma.inquiry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InquiryUpdateManyArgs>(args: SelectSubset<T, InquiryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Inquiry.
     * @param {InquiryUpsertArgs} args - Arguments to update or create a Inquiry.
     * @example
     * // Update or create a Inquiry
     * const inquiry = await prisma.inquiry.upsert({
     *   create: {
     *     // ... data to create a Inquiry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inquiry we want to update
     *   }
     * })
     */
    upsert<T extends InquiryUpsertArgs>(args: SelectSubset<T, InquiryUpsertArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Inquiries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryCountArgs} args - Arguments to filter Inquiries to count.
     * @example
     * // Count the number of Inquiries
     * const count = await prisma.inquiry.count({
     *   where: {
     *     // ... the filter for the Inquiries we want to count
     *   }
     * })
    **/
    count<T extends InquiryCountArgs>(
      args?: Subset<T, InquiryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InquiryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inquiry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InquiryAggregateArgs>(args: Subset<T, InquiryAggregateArgs>): Prisma.PrismaPromise<GetInquiryAggregateType<T>>

    /**
     * Group by Inquiry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InquiryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InquiryGroupByArgs['orderBy'] }
        : { orderBy?: InquiryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InquiryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInquiryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inquiry model
   */
  readonly fields: InquiryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inquiry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InquiryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Inquiry model
   */ 
  interface InquiryFieldRefs {
    readonly id: FieldRef<"Inquiry", 'Int'>
    readonly Account_id: FieldRef<"Inquiry", 'String'>
    readonly title: FieldRef<"Inquiry", 'String'>
    readonly image: FieldRef<"Inquiry", 'String'>
    readonly content: FieldRef<"Inquiry", 'String'>
    readonly waiting: FieldRef<"Inquiry", 'Int'>
    readonly created_date: FieldRef<"Inquiry", 'DateTime'>
    readonly type: FieldRef<"Inquiry", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Inquiry findUnique
   */
  export type InquiryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiry to fetch.
     */
    where: InquiryWhereUniqueInput
  }

  /**
   * Inquiry findUniqueOrThrow
   */
  export type InquiryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiry to fetch.
     */
    where: InquiryWhereUniqueInput
  }

  /**
   * Inquiry findFirst
   */
  export type InquiryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiry to fetch.
     */
    where?: InquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inquiries to fetch.
     */
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inquiries.
     */
    cursor?: InquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inquiries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inquiries.
     */
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * Inquiry findFirstOrThrow
   */
  export type InquiryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiry to fetch.
     */
    where?: InquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inquiries to fetch.
     */
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inquiries.
     */
    cursor?: InquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inquiries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inquiries.
     */
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * Inquiry findMany
   */
  export type InquiryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiries to fetch.
     */
    where?: InquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inquiries to fetch.
     */
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inquiries.
     */
    cursor?: InquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inquiries.
     */
    skip?: number
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * Inquiry create
   */
  export type InquiryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * The data needed to create a Inquiry.
     */
    data: XOR<InquiryCreateInput, InquiryUncheckedCreateInput>
  }

  /**
   * Inquiry createMany
   */
  export type InquiryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Inquiries.
     */
    data: InquiryCreateManyInput | InquiryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Inquiry update
   */
  export type InquiryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * The data needed to update a Inquiry.
     */
    data: XOR<InquiryUpdateInput, InquiryUncheckedUpdateInput>
    /**
     * Choose, which Inquiry to update.
     */
    where: InquiryWhereUniqueInput
  }

  /**
   * Inquiry updateMany
   */
  export type InquiryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inquiries.
     */
    data: XOR<InquiryUpdateManyMutationInput, InquiryUncheckedUpdateManyInput>
    /**
     * Filter which Inquiries to update
     */
    where?: InquiryWhereInput
  }

  /**
   * Inquiry upsert
   */
  export type InquiryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * The filter to search for the Inquiry to update in case it exists.
     */
    where: InquiryWhereUniqueInput
    /**
     * In case the Inquiry found by the `where` argument doesn't exist, create a new Inquiry with this data.
     */
    create: XOR<InquiryCreateInput, InquiryUncheckedCreateInput>
    /**
     * In case the Inquiry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InquiryUpdateInput, InquiryUncheckedUpdateInput>
  }

  /**
   * Inquiry delete
   */
  export type InquiryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter which Inquiry to delete.
     */
    where: InquiryWhereUniqueInput
  }

  /**
   * Inquiry deleteMany
   */
  export type InquiryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inquiries to delete
     */
    where?: InquiryWhereInput
  }

  /**
   * Inquiry without action
   */
  export type InquiryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
  }


  /**
   * Model Alarm
   */

  export type AggregateAlarm = {
    _count: AlarmCountAggregateOutputType | null
    _avg: AlarmAvgAggregateOutputType | null
    _sum: AlarmSumAggregateOutputType | null
    _min: AlarmMinAggregateOutputType | null
    _max: AlarmMaxAggregateOutputType | null
  }

  export type AlarmAvgAggregateOutputType = {
    id: number | null
  }

  export type AlarmSumAggregateOutputType = {
    id: number | null
  }

  export type AlarmMinAggregateOutputType = {
    id: number | null
    Account_id: string | null
    type: $Enums.alarmType | null
    title: string | null
    content: string | null
    created_date: Date | null
    updated_date: Date | null
  }

  export type AlarmMaxAggregateOutputType = {
    id: number | null
    Account_id: string | null
    type: $Enums.alarmType | null
    title: string | null
    content: string | null
    created_date: Date | null
    updated_date: Date | null
  }

  export type AlarmCountAggregateOutputType = {
    id: number
    Account_id: number
    type: number
    title: number
    content: number
    created_date: number
    updated_date: number
    _all: number
  }


  export type AlarmAvgAggregateInputType = {
    id?: true
  }

  export type AlarmSumAggregateInputType = {
    id?: true
  }

  export type AlarmMinAggregateInputType = {
    id?: true
    Account_id?: true
    type?: true
    title?: true
    content?: true
    created_date?: true
    updated_date?: true
  }

  export type AlarmMaxAggregateInputType = {
    id?: true
    Account_id?: true
    type?: true
    title?: true
    content?: true
    created_date?: true
    updated_date?: true
  }

  export type AlarmCountAggregateInputType = {
    id?: true
    Account_id?: true
    type?: true
    title?: true
    content?: true
    created_date?: true
    updated_date?: true
    _all?: true
  }

  export type AlarmAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alarm to aggregate.
     */
    where?: AlarmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlarmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alarms
    **/
    _count?: true | AlarmCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlarmAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlarmSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlarmMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlarmMaxAggregateInputType
  }

  export type GetAlarmAggregateType<T extends AlarmAggregateArgs> = {
        [P in keyof T & keyof AggregateAlarm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlarm[P]>
      : GetScalarType<T[P], AggregateAlarm[P]>
  }




  export type AlarmGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlarmWhereInput
    orderBy?: AlarmOrderByWithAggregationInput | AlarmOrderByWithAggregationInput[]
    by: AlarmScalarFieldEnum[] | AlarmScalarFieldEnum
    having?: AlarmScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlarmCountAggregateInputType | true
    _avg?: AlarmAvgAggregateInputType
    _sum?: AlarmSumAggregateInputType
    _min?: AlarmMinAggregateInputType
    _max?: AlarmMaxAggregateInputType
  }

  export type AlarmGroupByOutputType = {
    id: number
    Account_id: string
    type: $Enums.alarmType | null
    title: string | null
    content: string | null
    created_date: Date | null
    updated_date: Date | null
    _count: AlarmCountAggregateOutputType | null
    _avg: AlarmAvgAggregateOutputType | null
    _sum: AlarmSumAggregateOutputType | null
    _min: AlarmMinAggregateOutputType | null
    _max: AlarmMaxAggregateOutputType | null
  }

  type GetAlarmGroupByPayload<T extends AlarmGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlarmGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlarmGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlarmGroupByOutputType[P]>
            : GetScalarType<T[P], AlarmGroupByOutputType[P]>
        }
      >
    >


  export type AlarmSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Account_id?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    created_date?: boolean
    updated_date?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alarm"]>


  export type AlarmSelectScalar = {
    id?: boolean
    Account_id?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    created_date?: boolean
    updated_date?: boolean
  }

  export type AlarmInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }

  export type $AlarmPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alarm"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Account_id: string
      type: $Enums.alarmType | null
      title: string | null
      content: string | null
      created_date: Date | null
      updated_date: Date | null
    }, ExtArgs["result"]["alarm"]>
    composites: {}
  }

  type AlarmGetPayload<S extends boolean | null | undefined | AlarmDefaultArgs> = $Result.GetResult<Prisma.$AlarmPayload, S>

  type AlarmCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlarmFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlarmCountAggregateInputType | true
    }

  export interface AlarmDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alarm'], meta: { name: 'Alarm' } }
    /**
     * Find zero or one Alarm that matches the filter.
     * @param {AlarmFindUniqueArgs} args - Arguments to find a Alarm
     * @example
     * // Get one Alarm
     * const alarm = await prisma.alarm.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlarmFindUniqueArgs>(args: SelectSubset<T, AlarmFindUniqueArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Alarm that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AlarmFindUniqueOrThrowArgs} args - Arguments to find a Alarm
     * @example
     * // Get one Alarm
     * const alarm = await prisma.alarm.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlarmFindUniqueOrThrowArgs>(args: SelectSubset<T, AlarmFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Alarm that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmFindFirstArgs} args - Arguments to find a Alarm
     * @example
     * // Get one Alarm
     * const alarm = await prisma.alarm.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlarmFindFirstArgs>(args?: SelectSubset<T, AlarmFindFirstArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Alarm that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmFindFirstOrThrowArgs} args - Arguments to find a Alarm
     * @example
     * // Get one Alarm
     * const alarm = await prisma.alarm.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlarmFindFirstOrThrowArgs>(args?: SelectSubset<T, AlarmFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Alarms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alarms
     * const alarms = await prisma.alarm.findMany()
     * 
     * // Get first 10 Alarms
     * const alarms = await prisma.alarm.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alarmWithIdOnly = await prisma.alarm.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlarmFindManyArgs>(args?: SelectSubset<T, AlarmFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Alarm.
     * @param {AlarmCreateArgs} args - Arguments to create a Alarm.
     * @example
     * // Create one Alarm
     * const Alarm = await prisma.alarm.create({
     *   data: {
     *     // ... data to create a Alarm
     *   }
     * })
     * 
     */
    create<T extends AlarmCreateArgs>(args: SelectSubset<T, AlarmCreateArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Alarms.
     * @param {AlarmCreateManyArgs} args - Arguments to create many Alarms.
     * @example
     * // Create many Alarms
     * const alarm = await prisma.alarm.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlarmCreateManyArgs>(args?: SelectSubset<T, AlarmCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Alarm.
     * @param {AlarmDeleteArgs} args - Arguments to delete one Alarm.
     * @example
     * // Delete one Alarm
     * const Alarm = await prisma.alarm.delete({
     *   where: {
     *     // ... filter to delete one Alarm
     *   }
     * })
     * 
     */
    delete<T extends AlarmDeleteArgs>(args: SelectSubset<T, AlarmDeleteArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Alarm.
     * @param {AlarmUpdateArgs} args - Arguments to update one Alarm.
     * @example
     * // Update one Alarm
     * const alarm = await prisma.alarm.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlarmUpdateArgs>(args: SelectSubset<T, AlarmUpdateArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Alarms.
     * @param {AlarmDeleteManyArgs} args - Arguments to filter Alarms to delete.
     * @example
     * // Delete a few Alarms
     * const { count } = await prisma.alarm.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlarmDeleteManyArgs>(args?: SelectSubset<T, AlarmDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alarms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alarms
     * const alarm = await prisma.alarm.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlarmUpdateManyArgs>(args: SelectSubset<T, AlarmUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alarm.
     * @param {AlarmUpsertArgs} args - Arguments to update or create a Alarm.
     * @example
     * // Update or create a Alarm
     * const alarm = await prisma.alarm.upsert({
     *   create: {
     *     // ... data to create a Alarm
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alarm we want to update
     *   }
     * })
     */
    upsert<T extends AlarmUpsertArgs>(args: SelectSubset<T, AlarmUpsertArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Alarms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmCountArgs} args - Arguments to filter Alarms to count.
     * @example
     * // Count the number of Alarms
     * const count = await prisma.alarm.count({
     *   where: {
     *     // ... the filter for the Alarms we want to count
     *   }
     * })
    **/
    count<T extends AlarmCountArgs>(
      args?: Subset<T, AlarmCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlarmCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alarm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlarmAggregateArgs>(args: Subset<T, AlarmAggregateArgs>): Prisma.PrismaPromise<GetAlarmAggregateType<T>>

    /**
     * Group by Alarm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlarmGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlarmGroupByArgs['orderBy'] }
        : { orderBy?: AlarmGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlarmGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlarmGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alarm model
   */
  readonly fields: AlarmFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alarm.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlarmClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alarm model
   */ 
  interface AlarmFieldRefs {
    readonly id: FieldRef<"Alarm", 'Int'>
    readonly Account_id: FieldRef<"Alarm", 'String'>
    readonly type: FieldRef<"Alarm", 'alarmType'>
    readonly title: FieldRef<"Alarm", 'String'>
    readonly content: FieldRef<"Alarm", 'String'>
    readonly created_date: FieldRef<"Alarm", 'DateTime'>
    readonly updated_date: FieldRef<"Alarm", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Alarm findUnique
   */
  export type AlarmFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarm to fetch.
     */
    where: AlarmWhereUniqueInput
  }

  /**
   * Alarm findUniqueOrThrow
   */
  export type AlarmFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarm to fetch.
     */
    where: AlarmWhereUniqueInput
  }

  /**
   * Alarm findFirst
   */
  export type AlarmFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarm to fetch.
     */
    where?: AlarmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alarms.
     */
    cursor?: AlarmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alarms.
     */
    distinct?: AlarmScalarFieldEnum | AlarmScalarFieldEnum[]
  }

  /**
   * Alarm findFirstOrThrow
   */
  export type AlarmFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarm to fetch.
     */
    where?: AlarmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alarms.
     */
    cursor?: AlarmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alarms.
     */
    distinct?: AlarmScalarFieldEnum | AlarmScalarFieldEnum[]
  }

  /**
   * Alarm findMany
   */
  export type AlarmFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarms to fetch.
     */
    where?: AlarmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alarms.
     */
    cursor?: AlarmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    distinct?: AlarmScalarFieldEnum | AlarmScalarFieldEnum[]
  }

  /**
   * Alarm create
   */
  export type AlarmCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * The data needed to create a Alarm.
     */
    data: XOR<AlarmCreateInput, AlarmUncheckedCreateInput>
  }

  /**
   * Alarm createMany
   */
  export type AlarmCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alarms.
     */
    data: AlarmCreateManyInput | AlarmCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alarm update
   */
  export type AlarmUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * The data needed to update a Alarm.
     */
    data: XOR<AlarmUpdateInput, AlarmUncheckedUpdateInput>
    /**
     * Choose, which Alarm to update.
     */
    where: AlarmWhereUniqueInput
  }

  /**
   * Alarm updateMany
   */
  export type AlarmUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alarms.
     */
    data: XOR<AlarmUpdateManyMutationInput, AlarmUncheckedUpdateManyInput>
    /**
     * Filter which Alarms to update
     */
    where?: AlarmWhereInput
  }

  /**
   * Alarm upsert
   */
  export type AlarmUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * The filter to search for the Alarm to update in case it exists.
     */
    where: AlarmWhereUniqueInput
    /**
     * In case the Alarm found by the `where` argument doesn't exist, create a new Alarm with this data.
     */
    create: XOR<AlarmCreateInput, AlarmUncheckedCreateInput>
    /**
     * In case the Alarm was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlarmUpdateInput, AlarmUncheckedUpdateInput>
  }

  /**
   * Alarm delete
   */
  export type AlarmDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter which Alarm to delete.
     */
    where: AlarmWhereUniqueInput
  }

  /**
   * Alarm deleteMany
   */
  export type AlarmDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alarms to delete
     */
    where?: AlarmWhereInput
  }

  /**
   * Alarm without action
   */
  export type AlarmDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
  }


  /**
   * Model AccountMission
   */

  export type AggregateAccountMission = {
    _count: AccountMissionCountAggregateOutputType | null
    _avg: AccountMissionAvgAggregateOutputType | null
    _sum: AccountMissionSumAggregateOutputType | null
    _min: AccountMissionMinAggregateOutputType | null
    _max: AccountMissionMaxAggregateOutputType | null
  }

  export type AccountMissionAvgAggregateOutputType = {
    Mission_id: number | null
  }

  export type AccountMissionSumAggregateOutputType = {
    Mission_id: bigint | null
  }

  export type AccountMissionMinAggregateOutputType = {
    Account_id: string | null
    Mission_id: bigint | null
    success: $Enums.MissionStatus | null
  }

  export type AccountMissionMaxAggregateOutputType = {
    Account_id: string | null
    Mission_id: bigint | null
    success: $Enums.MissionStatus | null
  }

  export type AccountMissionCountAggregateOutputType = {
    Account_id: number
    Mission_id: number
    success: number
    _all: number
  }


  export type AccountMissionAvgAggregateInputType = {
    Mission_id?: true
  }

  export type AccountMissionSumAggregateInputType = {
    Mission_id?: true
  }

  export type AccountMissionMinAggregateInputType = {
    Account_id?: true
    Mission_id?: true
    success?: true
  }

  export type AccountMissionMaxAggregateInputType = {
    Account_id?: true
    Mission_id?: true
    success?: true
  }

  export type AccountMissionCountAggregateInputType = {
    Account_id?: true
    Mission_id?: true
    success?: true
    _all?: true
  }

  export type AccountMissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountMission to aggregate.
     */
    where?: AccountMissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountMissions to fetch.
     */
    orderBy?: AccountMissionOrderByWithRelationInput | AccountMissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountMissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountMissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountMissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountMissions
    **/
    _count?: true | AccountMissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountMissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountMissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMissionMaxAggregateInputType
  }

  export type GetAccountMissionAggregateType<T extends AccountMissionAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountMission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountMission[P]>
      : GetScalarType<T[P], AggregateAccountMission[P]>
  }




  export type AccountMissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountMissionWhereInput
    orderBy?: AccountMissionOrderByWithAggregationInput | AccountMissionOrderByWithAggregationInput[]
    by: AccountMissionScalarFieldEnum[] | AccountMissionScalarFieldEnum
    having?: AccountMissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountMissionCountAggregateInputType | true
    _avg?: AccountMissionAvgAggregateInputType
    _sum?: AccountMissionSumAggregateInputType
    _min?: AccountMissionMinAggregateInputType
    _max?: AccountMissionMaxAggregateInputType
  }

  export type AccountMissionGroupByOutputType = {
    Account_id: string
    Mission_id: bigint
    success: $Enums.MissionStatus | null
    _count: AccountMissionCountAggregateOutputType | null
    _avg: AccountMissionAvgAggregateOutputType | null
    _sum: AccountMissionSumAggregateOutputType | null
    _min: AccountMissionMinAggregateOutputType | null
    _max: AccountMissionMaxAggregateOutputType | null
  }

  type GetAccountMissionGroupByPayload<T extends AccountMissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountMissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountMissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountMissionGroupByOutputType[P]>
            : GetScalarType<T[P], AccountMissionGroupByOutputType[P]>
        }
      >
    >


  export type AccountMissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Account_id?: boolean
    Mission_id?: boolean
    success?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    mission?: boolean | MissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountMission"]>


  export type AccountMissionSelectScalar = {
    Account_id?: boolean
    Mission_id?: boolean
    success?: boolean
  }

  export type AccountMissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    mission?: boolean | MissionDefaultArgs<ExtArgs>
  }

  export type $AccountMissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountMission"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      mission: Prisma.$MissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Account_id: string
      Mission_id: bigint
      success: $Enums.MissionStatus | null
    }, ExtArgs["result"]["accountMission"]>
    composites: {}
  }

  type AccountMissionGetPayload<S extends boolean | null | undefined | AccountMissionDefaultArgs> = $Result.GetResult<Prisma.$AccountMissionPayload, S>

  type AccountMissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountMissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountMissionCountAggregateInputType | true
    }

  export interface AccountMissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountMission'], meta: { name: 'AccountMission' } }
    /**
     * Find zero or one AccountMission that matches the filter.
     * @param {AccountMissionFindUniqueArgs} args - Arguments to find a AccountMission
     * @example
     * // Get one AccountMission
     * const accountMission = await prisma.accountMission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountMissionFindUniqueArgs>(args: SelectSubset<T, AccountMissionFindUniqueArgs<ExtArgs>>): Prisma__AccountMissionClient<$Result.GetResult<Prisma.$AccountMissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AccountMission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountMissionFindUniqueOrThrowArgs} args - Arguments to find a AccountMission
     * @example
     * // Get one AccountMission
     * const accountMission = await prisma.accountMission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountMissionFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountMissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountMissionClient<$Result.GetResult<Prisma.$AccountMissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AccountMission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountMissionFindFirstArgs} args - Arguments to find a AccountMission
     * @example
     * // Get one AccountMission
     * const accountMission = await prisma.accountMission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountMissionFindFirstArgs>(args?: SelectSubset<T, AccountMissionFindFirstArgs<ExtArgs>>): Prisma__AccountMissionClient<$Result.GetResult<Prisma.$AccountMissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AccountMission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountMissionFindFirstOrThrowArgs} args - Arguments to find a AccountMission
     * @example
     * // Get one AccountMission
     * const accountMission = await prisma.accountMission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountMissionFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountMissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountMissionClient<$Result.GetResult<Prisma.$AccountMissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AccountMissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountMissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountMissions
     * const accountMissions = await prisma.accountMission.findMany()
     * 
     * // Get first 10 AccountMissions
     * const accountMissions = await prisma.accountMission.findMany({ take: 10 })
     * 
     * // Only select the `Account_id`
     * const accountMissionWithAccount_idOnly = await prisma.accountMission.findMany({ select: { Account_id: true } })
     * 
     */
    findMany<T extends AccountMissionFindManyArgs>(args?: SelectSubset<T, AccountMissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountMissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AccountMission.
     * @param {AccountMissionCreateArgs} args - Arguments to create a AccountMission.
     * @example
     * // Create one AccountMission
     * const AccountMission = await prisma.accountMission.create({
     *   data: {
     *     // ... data to create a AccountMission
     *   }
     * })
     * 
     */
    create<T extends AccountMissionCreateArgs>(args: SelectSubset<T, AccountMissionCreateArgs<ExtArgs>>): Prisma__AccountMissionClient<$Result.GetResult<Prisma.$AccountMissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AccountMissions.
     * @param {AccountMissionCreateManyArgs} args - Arguments to create many AccountMissions.
     * @example
     * // Create many AccountMissions
     * const accountMission = await prisma.accountMission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountMissionCreateManyArgs>(args?: SelectSubset<T, AccountMissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccountMission.
     * @param {AccountMissionDeleteArgs} args - Arguments to delete one AccountMission.
     * @example
     * // Delete one AccountMission
     * const AccountMission = await prisma.accountMission.delete({
     *   where: {
     *     // ... filter to delete one AccountMission
     *   }
     * })
     * 
     */
    delete<T extends AccountMissionDeleteArgs>(args: SelectSubset<T, AccountMissionDeleteArgs<ExtArgs>>): Prisma__AccountMissionClient<$Result.GetResult<Prisma.$AccountMissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AccountMission.
     * @param {AccountMissionUpdateArgs} args - Arguments to update one AccountMission.
     * @example
     * // Update one AccountMission
     * const accountMission = await prisma.accountMission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountMissionUpdateArgs>(args: SelectSubset<T, AccountMissionUpdateArgs<ExtArgs>>): Prisma__AccountMissionClient<$Result.GetResult<Prisma.$AccountMissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AccountMissions.
     * @param {AccountMissionDeleteManyArgs} args - Arguments to filter AccountMissions to delete.
     * @example
     * // Delete a few AccountMissions
     * const { count } = await prisma.accountMission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountMissionDeleteManyArgs>(args?: SelectSubset<T, AccountMissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountMissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountMissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountMissions
     * const accountMission = await prisma.accountMission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountMissionUpdateManyArgs>(args: SelectSubset<T, AccountMissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountMission.
     * @param {AccountMissionUpsertArgs} args - Arguments to update or create a AccountMission.
     * @example
     * // Update or create a AccountMission
     * const accountMission = await prisma.accountMission.upsert({
     *   create: {
     *     // ... data to create a AccountMission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountMission we want to update
     *   }
     * })
     */
    upsert<T extends AccountMissionUpsertArgs>(args: SelectSubset<T, AccountMissionUpsertArgs<ExtArgs>>): Prisma__AccountMissionClient<$Result.GetResult<Prisma.$AccountMissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AccountMissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountMissionCountArgs} args - Arguments to filter AccountMissions to count.
     * @example
     * // Count the number of AccountMissions
     * const count = await prisma.accountMission.count({
     *   where: {
     *     // ... the filter for the AccountMissions we want to count
     *   }
     * })
    **/
    count<T extends AccountMissionCountArgs>(
      args?: Subset<T, AccountMissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountMissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountMission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountMissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountMissionAggregateArgs>(args: Subset<T, AccountMissionAggregateArgs>): Prisma.PrismaPromise<GetAccountMissionAggregateType<T>>

    /**
     * Group by AccountMission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountMissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountMissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountMissionGroupByArgs['orderBy'] }
        : { orderBy?: AccountMissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountMissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountMissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountMission model
   */
  readonly fields: AccountMissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountMission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountMissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    mission<T extends MissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MissionDefaultArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountMission model
   */ 
  interface AccountMissionFieldRefs {
    readonly Account_id: FieldRef<"AccountMission", 'String'>
    readonly Mission_id: FieldRef<"AccountMission", 'BigInt'>
    readonly success: FieldRef<"AccountMission", 'MissionStatus'>
  }
    

  // Custom InputTypes
  /**
   * AccountMission findUnique
   */
  export type AccountMissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountMission
     */
    select?: AccountMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountMissionInclude<ExtArgs> | null
    /**
     * Filter, which AccountMission to fetch.
     */
    where: AccountMissionWhereUniqueInput
  }

  /**
   * AccountMission findUniqueOrThrow
   */
  export type AccountMissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountMission
     */
    select?: AccountMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountMissionInclude<ExtArgs> | null
    /**
     * Filter, which AccountMission to fetch.
     */
    where: AccountMissionWhereUniqueInput
  }

  /**
   * AccountMission findFirst
   */
  export type AccountMissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountMission
     */
    select?: AccountMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountMissionInclude<ExtArgs> | null
    /**
     * Filter, which AccountMission to fetch.
     */
    where?: AccountMissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountMissions to fetch.
     */
    orderBy?: AccountMissionOrderByWithRelationInput | AccountMissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountMissions.
     */
    cursor?: AccountMissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountMissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountMissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountMissions.
     */
    distinct?: AccountMissionScalarFieldEnum | AccountMissionScalarFieldEnum[]
  }

  /**
   * AccountMission findFirstOrThrow
   */
  export type AccountMissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountMission
     */
    select?: AccountMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountMissionInclude<ExtArgs> | null
    /**
     * Filter, which AccountMission to fetch.
     */
    where?: AccountMissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountMissions to fetch.
     */
    orderBy?: AccountMissionOrderByWithRelationInput | AccountMissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountMissions.
     */
    cursor?: AccountMissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountMissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountMissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountMissions.
     */
    distinct?: AccountMissionScalarFieldEnum | AccountMissionScalarFieldEnum[]
  }

  /**
   * AccountMission findMany
   */
  export type AccountMissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountMission
     */
    select?: AccountMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountMissionInclude<ExtArgs> | null
    /**
     * Filter, which AccountMissions to fetch.
     */
    where?: AccountMissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountMissions to fetch.
     */
    orderBy?: AccountMissionOrderByWithRelationInput | AccountMissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountMissions.
     */
    cursor?: AccountMissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountMissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountMissions.
     */
    skip?: number
    distinct?: AccountMissionScalarFieldEnum | AccountMissionScalarFieldEnum[]
  }

  /**
   * AccountMission create
   */
  export type AccountMissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountMission
     */
    select?: AccountMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountMissionInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountMission.
     */
    data: XOR<AccountMissionCreateInput, AccountMissionUncheckedCreateInput>
  }

  /**
   * AccountMission createMany
   */
  export type AccountMissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountMissions.
     */
    data: AccountMissionCreateManyInput | AccountMissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountMission update
   */
  export type AccountMissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountMission
     */
    select?: AccountMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountMissionInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountMission.
     */
    data: XOR<AccountMissionUpdateInput, AccountMissionUncheckedUpdateInput>
    /**
     * Choose, which AccountMission to update.
     */
    where: AccountMissionWhereUniqueInput
  }

  /**
   * AccountMission updateMany
   */
  export type AccountMissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountMissions.
     */
    data: XOR<AccountMissionUpdateManyMutationInput, AccountMissionUncheckedUpdateManyInput>
    /**
     * Filter which AccountMissions to update
     */
    where?: AccountMissionWhereInput
  }

  /**
   * AccountMission upsert
   */
  export type AccountMissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountMission
     */
    select?: AccountMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountMissionInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountMission to update in case it exists.
     */
    where: AccountMissionWhereUniqueInput
    /**
     * In case the AccountMission found by the `where` argument doesn't exist, create a new AccountMission with this data.
     */
    create: XOR<AccountMissionCreateInput, AccountMissionUncheckedCreateInput>
    /**
     * In case the AccountMission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountMissionUpdateInput, AccountMissionUncheckedUpdateInput>
  }

  /**
   * AccountMission delete
   */
  export type AccountMissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountMission
     */
    select?: AccountMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountMissionInclude<ExtArgs> | null
    /**
     * Filter which AccountMission to delete.
     */
    where: AccountMissionWhereUniqueInput
  }

  /**
   * AccountMission deleteMany
   */
  export type AccountMissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountMissions to delete
     */
    where?: AccountMissionWhereInput
  }

  /**
   * AccountMission without action
   */
  export type AccountMissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountMission
     */
    select?: AccountMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountMissionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    password: 'password',
    name: 'name',
    birthday: 'birthday',
    address: 'address',
    nickname: 'nickname',
    email: 'email',
    gender: 'gender',
    phone_number: 'phone_number',
    status: 'status',
    inactive_date: 'inactive_date',
    created_date: 'created_date',
    updated_date: 'updated_date',
    savepoint: 'savepoint',
    location_O: 'location_O',
    marketing_O: 'marketing_O',
    event_reception: 'event_reception',
    review_reception: 'review_reception',
    inquiry_reception: 'inquiry_reception',
    korean_food: 'korean_food',
    japan_food: 'japan_food',
    china_food: 'china_food',
    western_food: 'western_food',
    chicken: 'chicken',
    snack_food: 'snack_food',
    meat: 'meat',
    lunchbox: 'lunchbox',
    LNS: 'LNS',
    fastfood: 'fastfood',
    dessert: 'dessert',
    asian_food: 'asian_food'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const RestaurantScalarFieldEnum: {
    id: 'id',
    restaurant_name: 'restaurant_name',
    address: 'address',
    type: 'type',
    picture: 'picture',
    created_date: 'created_date',
    updated_date: 'updated_date',
    inactive_date: 'inactive_date',
    status: 'status',
    phone_number: 'phone_number'
  };

  export type RestaurantScalarFieldEnum = (typeof RestaurantScalarFieldEnum)[keyof typeof RestaurantScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    Restaurant_id: 'Restaurant_id',
    Account_id: 'Account_id',
    score: 'score',
    picture: 'picture',
    content: 'content',
    created_date: 'created_date',
    updated_date: 'updated_date'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const MissionScalarFieldEnum: {
    id: 'id',
    Restaurant_id: 'Restaurant_id',
    mission_name: 'mission_name',
    deadline: 'deadline',
    created_date: 'created_date',
    updated_date: 'updated_date',
    count: 'count',
    mission_point: 'mission_point'
  };

  export type MissionScalarFieldEnum = (typeof MissionScalarFieldEnum)[keyof typeof MissionScalarFieldEnum]


  export const InquiryScalarFieldEnum: {
    id: 'id',
    Account_id: 'Account_id',
    title: 'title',
    image: 'image',
    content: 'content',
    waiting: 'waiting',
    created_date: 'created_date',
    type: 'type'
  };

  export type InquiryScalarFieldEnum = (typeof InquiryScalarFieldEnum)[keyof typeof InquiryScalarFieldEnum]


  export const AlarmScalarFieldEnum: {
    id: 'id',
    Account_id: 'Account_id',
    type: 'type',
    title: 'title',
    content: 'content',
    created_date: 'created_date',
    updated_date: 'updated_date'
  };

  export type AlarmScalarFieldEnum = (typeof AlarmScalarFieldEnum)[keyof typeof AlarmScalarFieldEnum]


  export const AccountMissionScalarFieldEnum: {
    Account_id: 'Account_id',
    Mission_id: 'Mission_id',
    success: 'success'
  };

  export type AccountMissionScalarFieldEnum = (typeof AccountMissionScalarFieldEnum)[keyof typeof AccountMissionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'alarmType'
   */
  export type EnumalarmTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'alarmType'>
    


  /**
   * Reference to a field of type 'MissionStatus'
   */
  export type EnumMissionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MissionStatus'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    password?: StringFilter<"Account"> | string
    name?: StringFilter<"Account"> | string
    birthday?: DateTimeFilter<"Account"> | Date | string
    address?: StringFilter<"Account"> | string
    nickname?: StringFilter<"Account"> | string
    email?: StringFilter<"Account"> | string
    gender?: IntNullableFilter<"Account"> | number | null
    phone_number?: StringNullableFilter<"Account"> | string | null
    status?: StringNullableFilter<"Account"> | string | null
    inactive_date?: DateTimeNullableFilter<"Account"> | Date | string | null
    created_date?: DateTimeFilter<"Account"> | Date | string
    updated_date?: DateTimeNullableFilter<"Account"> | Date | string | null
    savepoint?: IntNullableFilter<"Account"> | number | null
    location_O?: IntFilter<"Account"> | number
    marketing_O?: IntFilter<"Account"> | number
    event_reception?: IntFilter<"Account"> | number
    review_reception?: IntFilter<"Account"> | number
    inquiry_reception?: IntFilter<"Account"> | number
    korean_food?: IntNullableFilter<"Account"> | number | null
    japan_food?: IntNullableFilter<"Account"> | number | null
    china_food?: IntNullableFilter<"Account"> | number | null
    western_food?: IntNullableFilter<"Account"> | number | null
    chicken?: IntNullableFilter<"Account"> | number | null
    snack_food?: IntNullableFilter<"Account"> | number | null
    meat?: IntNullableFilter<"Account"> | number | null
    lunchbox?: IntNullableFilter<"Account"> | number | null
    LNS?: IntNullableFilter<"Account"> | number | null
    fastfood?: IntNullableFilter<"Account"> | number | null
    dessert?: IntNullableFilter<"Account"> | number | null
    asian_food?: IntNullableFilter<"Account"> | number | null
    reviews?: ReviewListRelationFilter
    inquiries?: InquiryListRelationFilter
    alarms?: AlarmListRelationFilter
    accountMissions?: AccountMissionListRelationFilter
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    password?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    address?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    gender?: SortOrderInput | SortOrder
    phone_number?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    inactive_date?: SortOrderInput | SortOrder
    created_date?: SortOrder
    updated_date?: SortOrderInput | SortOrder
    savepoint?: SortOrderInput | SortOrder
    location_O?: SortOrder
    marketing_O?: SortOrder
    event_reception?: SortOrder
    review_reception?: SortOrder
    inquiry_reception?: SortOrder
    korean_food?: SortOrderInput | SortOrder
    japan_food?: SortOrderInput | SortOrder
    china_food?: SortOrderInput | SortOrder
    western_food?: SortOrderInput | SortOrder
    chicken?: SortOrderInput | SortOrder
    snack_food?: SortOrderInput | SortOrder
    meat?: SortOrderInput | SortOrder
    lunchbox?: SortOrderInput | SortOrder
    LNS?: SortOrderInput | SortOrder
    fastfood?: SortOrderInput | SortOrder
    dessert?: SortOrderInput | SortOrder
    asian_food?: SortOrderInput | SortOrder
    reviews?: ReviewOrderByRelationAggregateInput
    inquiries?: InquiryOrderByRelationAggregateInput
    alarms?: AlarmOrderByRelationAggregateInput
    accountMissions?: AccountMissionOrderByRelationAggregateInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    password?: StringFilter<"Account"> | string
    name?: StringFilter<"Account"> | string
    birthday?: DateTimeFilter<"Account"> | Date | string
    address?: StringFilter<"Account"> | string
    nickname?: StringFilter<"Account"> | string
    email?: StringFilter<"Account"> | string
    gender?: IntNullableFilter<"Account"> | number | null
    phone_number?: StringNullableFilter<"Account"> | string | null
    status?: StringNullableFilter<"Account"> | string | null
    inactive_date?: DateTimeNullableFilter<"Account"> | Date | string | null
    created_date?: DateTimeFilter<"Account"> | Date | string
    updated_date?: DateTimeNullableFilter<"Account"> | Date | string | null
    savepoint?: IntNullableFilter<"Account"> | number | null
    location_O?: IntFilter<"Account"> | number
    marketing_O?: IntFilter<"Account"> | number
    event_reception?: IntFilter<"Account"> | number
    review_reception?: IntFilter<"Account"> | number
    inquiry_reception?: IntFilter<"Account"> | number
    korean_food?: IntNullableFilter<"Account"> | number | null
    japan_food?: IntNullableFilter<"Account"> | number | null
    china_food?: IntNullableFilter<"Account"> | number | null
    western_food?: IntNullableFilter<"Account"> | number | null
    chicken?: IntNullableFilter<"Account"> | number | null
    snack_food?: IntNullableFilter<"Account"> | number | null
    meat?: IntNullableFilter<"Account"> | number | null
    lunchbox?: IntNullableFilter<"Account"> | number | null
    LNS?: IntNullableFilter<"Account"> | number | null
    fastfood?: IntNullableFilter<"Account"> | number | null
    dessert?: IntNullableFilter<"Account"> | number | null
    asian_food?: IntNullableFilter<"Account"> | number | null
    reviews?: ReviewListRelationFilter
    inquiries?: InquiryListRelationFilter
    alarms?: AlarmListRelationFilter
    accountMissions?: AccountMissionListRelationFilter
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    password?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    address?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    gender?: SortOrderInput | SortOrder
    phone_number?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    inactive_date?: SortOrderInput | SortOrder
    created_date?: SortOrder
    updated_date?: SortOrderInput | SortOrder
    savepoint?: SortOrderInput | SortOrder
    location_O?: SortOrder
    marketing_O?: SortOrder
    event_reception?: SortOrder
    review_reception?: SortOrder
    inquiry_reception?: SortOrder
    korean_food?: SortOrderInput | SortOrder
    japan_food?: SortOrderInput | SortOrder
    china_food?: SortOrderInput | SortOrder
    western_food?: SortOrderInput | SortOrder
    chicken?: SortOrderInput | SortOrder
    snack_food?: SortOrderInput | SortOrder
    meat?: SortOrderInput | SortOrder
    lunchbox?: SortOrderInput | SortOrder
    LNS?: SortOrderInput | SortOrder
    fastfood?: SortOrderInput | SortOrder
    dessert?: SortOrderInput | SortOrder
    asian_food?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    password?: StringWithAggregatesFilter<"Account"> | string
    name?: StringWithAggregatesFilter<"Account"> | string
    birthday?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    address?: StringWithAggregatesFilter<"Account"> | string
    nickname?: StringWithAggregatesFilter<"Account"> | string
    email?: StringWithAggregatesFilter<"Account"> | string
    gender?: IntNullableWithAggregatesFilter<"Account"> | number | null
    phone_number?: StringNullableWithAggregatesFilter<"Account"> | string | null
    status?: StringNullableWithAggregatesFilter<"Account"> | string | null
    inactive_date?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    created_date?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updated_date?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    savepoint?: IntNullableWithAggregatesFilter<"Account"> | number | null
    location_O?: IntWithAggregatesFilter<"Account"> | number
    marketing_O?: IntWithAggregatesFilter<"Account"> | number
    event_reception?: IntWithAggregatesFilter<"Account"> | number
    review_reception?: IntWithAggregatesFilter<"Account"> | number
    inquiry_reception?: IntWithAggregatesFilter<"Account"> | number
    korean_food?: IntNullableWithAggregatesFilter<"Account"> | number | null
    japan_food?: IntNullableWithAggregatesFilter<"Account"> | number | null
    china_food?: IntNullableWithAggregatesFilter<"Account"> | number | null
    western_food?: IntNullableWithAggregatesFilter<"Account"> | number | null
    chicken?: IntNullableWithAggregatesFilter<"Account"> | number | null
    snack_food?: IntNullableWithAggregatesFilter<"Account"> | number | null
    meat?: IntNullableWithAggregatesFilter<"Account"> | number | null
    lunchbox?: IntNullableWithAggregatesFilter<"Account"> | number | null
    LNS?: IntNullableWithAggregatesFilter<"Account"> | number | null
    fastfood?: IntNullableWithAggregatesFilter<"Account"> | number | null
    dessert?: IntNullableWithAggregatesFilter<"Account"> | number | null
    asian_food?: IntNullableWithAggregatesFilter<"Account"> | number | null
  }

  export type RestaurantWhereInput = {
    AND?: RestaurantWhereInput | RestaurantWhereInput[]
    OR?: RestaurantWhereInput[]
    NOT?: RestaurantWhereInput | RestaurantWhereInput[]
    id?: BigIntFilter<"Restaurant"> | bigint | number
    restaurant_name?: StringFilter<"Restaurant"> | string
    address?: StringFilter<"Restaurant"> | string
    type?: StringNullableFilter<"Restaurant"> | string | null
    picture?: StringNullableFilter<"Restaurant"> | string | null
    created_date?: DateTimeFilter<"Restaurant"> | Date | string
    updated_date?: DateTimeNullableFilter<"Restaurant"> | Date | string | null
    inactive_date?: DateTimeNullableFilter<"Restaurant"> | Date | string | null
    status?: StringNullableFilter<"Restaurant"> | string | null
    phone_number?: StringNullableFilter<"Restaurant"> | string | null
    reviews?: ReviewListRelationFilter
    missions?: MissionListRelationFilter
  }

  export type RestaurantOrderByWithRelationInput = {
    id?: SortOrder
    restaurant_name?: SortOrder
    address?: SortOrder
    type?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    created_date?: SortOrder
    updated_date?: SortOrderInput | SortOrder
    inactive_date?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    phone_number?: SortOrderInput | SortOrder
    reviews?: ReviewOrderByRelationAggregateInput
    missions?: MissionOrderByRelationAggregateInput
  }

  export type RestaurantWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: RestaurantWhereInput | RestaurantWhereInput[]
    OR?: RestaurantWhereInput[]
    NOT?: RestaurantWhereInput | RestaurantWhereInput[]
    restaurant_name?: StringFilter<"Restaurant"> | string
    address?: StringFilter<"Restaurant"> | string
    type?: StringNullableFilter<"Restaurant"> | string | null
    picture?: StringNullableFilter<"Restaurant"> | string | null
    created_date?: DateTimeFilter<"Restaurant"> | Date | string
    updated_date?: DateTimeNullableFilter<"Restaurant"> | Date | string | null
    inactive_date?: DateTimeNullableFilter<"Restaurant"> | Date | string | null
    status?: StringNullableFilter<"Restaurant"> | string | null
    phone_number?: StringNullableFilter<"Restaurant"> | string | null
    reviews?: ReviewListRelationFilter
    missions?: MissionListRelationFilter
  }, "id">

  export type RestaurantOrderByWithAggregationInput = {
    id?: SortOrder
    restaurant_name?: SortOrder
    address?: SortOrder
    type?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    created_date?: SortOrder
    updated_date?: SortOrderInput | SortOrder
    inactive_date?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    phone_number?: SortOrderInput | SortOrder
    _count?: RestaurantCountOrderByAggregateInput
    _avg?: RestaurantAvgOrderByAggregateInput
    _max?: RestaurantMaxOrderByAggregateInput
    _min?: RestaurantMinOrderByAggregateInput
    _sum?: RestaurantSumOrderByAggregateInput
  }

  export type RestaurantScalarWhereWithAggregatesInput = {
    AND?: RestaurantScalarWhereWithAggregatesInput | RestaurantScalarWhereWithAggregatesInput[]
    OR?: RestaurantScalarWhereWithAggregatesInput[]
    NOT?: RestaurantScalarWhereWithAggregatesInput | RestaurantScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Restaurant"> | bigint | number
    restaurant_name?: StringWithAggregatesFilter<"Restaurant"> | string
    address?: StringWithAggregatesFilter<"Restaurant"> | string
    type?: StringNullableWithAggregatesFilter<"Restaurant"> | string | null
    picture?: StringNullableWithAggregatesFilter<"Restaurant"> | string | null
    created_date?: DateTimeWithAggregatesFilter<"Restaurant"> | Date | string
    updated_date?: DateTimeNullableWithAggregatesFilter<"Restaurant"> | Date | string | null
    inactive_date?: DateTimeNullableWithAggregatesFilter<"Restaurant"> | Date | string | null
    status?: StringNullableWithAggregatesFilter<"Restaurant"> | string | null
    phone_number?: StringNullableWithAggregatesFilter<"Restaurant"> | string | null
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: BigIntFilter<"Review"> | bigint | number
    Restaurant_id?: BigIntFilter<"Review"> | bigint | number
    Account_id?: StringFilter<"Review"> | string
    score?: IntNullableFilter<"Review"> | number | null
    picture?: StringNullableFilter<"Review"> | string | null
    content?: StringNullableFilter<"Review"> | string | null
    created_date?: DateTimeFilter<"Review"> | Date | string
    updated_date?: DateTimeNullableFilter<"Review"> | Date | string | null
    restaurant?: XOR<RestaurantRelationFilter, RestaurantWhereInput>
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    Restaurant_id?: SortOrder
    Account_id?: SortOrder
    score?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    created_date?: SortOrder
    updated_date?: SortOrderInput | SortOrder
    restaurant?: RestaurantOrderByWithRelationInput
    account?: AccountOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    Restaurant_id?: BigIntFilter<"Review"> | bigint | number
    Account_id?: StringFilter<"Review"> | string
    score?: IntNullableFilter<"Review"> | number | null
    picture?: StringNullableFilter<"Review"> | string | null
    content?: StringNullableFilter<"Review"> | string | null
    created_date?: DateTimeFilter<"Review"> | Date | string
    updated_date?: DateTimeNullableFilter<"Review"> | Date | string | null
    restaurant?: XOR<RestaurantRelationFilter, RestaurantWhereInput>
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }, "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    Restaurant_id?: SortOrder
    Account_id?: SortOrder
    score?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    created_date?: SortOrder
    updated_date?: SortOrderInput | SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Review"> | bigint | number
    Restaurant_id?: BigIntWithAggregatesFilter<"Review"> | bigint | number
    Account_id?: StringWithAggregatesFilter<"Review"> | string
    score?: IntNullableWithAggregatesFilter<"Review"> | number | null
    picture?: StringNullableWithAggregatesFilter<"Review"> | string | null
    content?: StringNullableWithAggregatesFilter<"Review"> | string | null
    created_date?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    updated_date?: DateTimeNullableWithAggregatesFilter<"Review"> | Date | string | null
  }

  export type MissionWhereInput = {
    AND?: MissionWhereInput | MissionWhereInput[]
    OR?: MissionWhereInput[]
    NOT?: MissionWhereInput | MissionWhereInput[]
    id?: BigIntFilter<"Mission"> | bigint | number
    Restaurant_id?: BigIntFilter<"Mission"> | bigint | number
    mission_name?: StringFilter<"Mission"> | string
    deadline?: DateTimeNullableFilter<"Mission"> | Date | string | null
    created_date?: DateTimeFilter<"Mission"> | Date | string
    updated_date?: DateTimeNullableFilter<"Mission"> | Date | string | null
    count?: IntNullableFilter<"Mission"> | number | null
    mission_point?: IntNullableFilter<"Mission"> | number | null
    restaurant?: XOR<RestaurantRelationFilter, RestaurantWhereInput>
    accountMissions?: AccountMissionListRelationFilter
  }

  export type MissionOrderByWithRelationInput = {
    id?: SortOrder
    Restaurant_id?: SortOrder
    mission_name?: SortOrder
    deadline?: SortOrderInput | SortOrder
    created_date?: SortOrder
    updated_date?: SortOrderInput | SortOrder
    count?: SortOrderInput | SortOrder
    mission_point?: SortOrderInput | SortOrder
    restaurant?: RestaurantOrderByWithRelationInput
    accountMissions?: AccountMissionOrderByRelationAggregateInput
  }

  export type MissionWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: MissionWhereInput | MissionWhereInput[]
    OR?: MissionWhereInput[]
    NOT?: MissionWhereInput | MissionWhereInput[]
    Restaurant_id?: BigIntFilter<"Mission"> | bigint | number
    mission_name?: StringFilter<"Mission"> | string
    deadline?: DateTimeNullableFilter<"Mission"> | Date | string | null
    created_date?: DateTimeFilter<"Mission"> | Date | string
    updated_date?: DateTimeNullableFilter<"Mission"> | Date | string | null
    count?: IntNullableFilter<"Mission"> | number | null
    mission_point?: IntNullableFilter<"Mission"> | number | null
    restaurant?: XOR<RestaurantRelationFilter, RestaurantWhereInput>
    accountMissions?: AccountMissionListRelationFilter
  }, "id">

  export type MissionOrderByWithAggregationInput = {
    id?: SortOrder
    Restaurant_id?: SortOrder
    mission_name?: SortOrder
    deadline?: SortOrderInput | SortOrder
    created_date?: SortOrder
    updated_date?: SortOrderInput | SortOrder
    count?: SortOrderInput | SortOrder
    mission_point?: SortOrderInput | SortOrder
    _count?: MissionCountOrderByAggregateInput
    _avg?: MissionAvgOrderByAggregateInput
    _max?: MissionMaxOrderByAggregateInput
    _min?: MissionMinOrderByAggregateInput
    _sum?: MissionSumOrderByAggregateInput
  }

  export type MissionScalarWhereWithAggregatesInput = {
    AND?: MissionScalarWhereWithAggregatesInput | MissionScalarWhereWithAggregatesInput[]
    OR?: MissionScalarWhereWithAggregatesInput[]
    NOT?: MissionScalarWhereWithAggregatesInput | MissionScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Mission"> | bigint | number
    Restaurant_id?: BigIntWithAggregatesFilter<"Mission"> | bigint | number
    mission_name?: StringWithAggregatesFilter<"Mission"> | string
    deadline?: DateTimeNullableWithAggregatesFilter<"Mission"> | Date | string | null
    created_date?: DateTimeWithAggregatesFilter<"Mission"> | Date | string
    updated_date?: DateTimeNullableWithAggregatesFilter<"Mission"> | Date | string | null
    count?: IntNullableWithAggregatesFilter<"Mission"> | number | null
    mission_point?: IntNullableWithAggregatesFilter<"Mission"> | number | null
  }

  export type InquiryWhereInput = {
    AND?: InquiryWhereInput | InquiryWhereInput[]
    OR?: InquiryWhereInput[]
    NOT?: InquiryWhereInput | InquiryWhereInput[]
    id?: IntFilter<"Inquiry"> | number
    Account_id?: StringFilter<"Inquiry"> | string
    title?: StringNullableFilter<"Inquiry"> | string | null
    image?: StringNullableFilter<"Inquiry"> | string | null
    content?: StringNullableFilter<"Inquiry"> | string | null
    waiting?: IntNullableFilter<"Inquiry"> | number | null
    created_date?: DateTimeNullableFilter<"Inquiry"> | Date | string | null
    type?: StringNullableFilter<"Inquiry"> | string | null
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type InquiryOrderByWithRelationInput = {
    id?: SortOrder
    Account_id?: SortOrder
    title?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    waiting?: SortOrderInput | SortOrder
    created_date?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type InquiryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InquiryWhereInput | InquiryWhereInput[]
    OR?: InquiryWhereInput[]
    NOT?: InquiryWhereInput | InquiryWhereInput[]
    Account_id?: StringFilter<"Inquiry"> | string
    title?: StringNullableFilter<"Inquiry"> | string | null
    image?: StringNullableFilter<"Inquiry"> | string | null
    content?: StringNullableFilter<"Inquiry"> | string | null
    waiting?: IntNullableFilter<"Inquiry"> | number | null
    created_date?: DateTimeNullableFilter<"Inquiry"> | Date | string | null
    type?: StringNullableFilter<"Inquiry"> | string | null
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }, "id">

  export type InquiryOrderByWithAggregationInput = {
    id?: SortOrder
    Account_id?: SortOrder
    title?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    waiting?: SortOrderInput | SortOrder
    created_date?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    _count?: InquiryCountOrderByAggregateInput
    _avg?: InquiryAvgOrderByAggregateInput
    _max?: InquiryMaxOrderByAggregateInput
    _min?: InquiryMinOrderByAggregateInput
    _sum?: InquirySumOrderByAggregateInput
  }

  export type InquiryScalarWhereWithAggregatesInput = {
    AND?: InquiryScalarWhereWithAggregatesInput | InquiryScalarWhereWithAggregatesInput[]
    OR?: InquiryScalarWhereWithAggregatesInput[]
    NOT?: InquiryScalarWhereWithAggregatesInput | InquiryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Inquiry"> | number
    Account_id?: StringWithAggregatesFilter<"Inquiry"> | string
    title?: StringNullableWithAggregatesFilter<"Inquiry"> | string | null
    image?: StringNullableWithAggregatesFilter<"Inquiry"> | string | null
    content?: StringNullableWithAggregatesFilter<"Inquiry"> | string | null
    waiting?: IntNullableWithAggregatesFilter<"Inquiry"> | number | null
    created_date?: DateTimeNullableWithAggregatesFilter<"Inquiry"> | Date | string | null
    type?: StringNullableWithAggregatesFilter<"Inquiry"> | string | null
  }

  export type AlarmWhereInput = {
    AND?: AlarmWhereInput | AlarmWhereInput[]
    OR?: AlarmWhereInput[]
    NOT?: AlarmWhereInput | AlarmWhereInput[]
    id?: IntFilter<"Alarm"> | number
    Account_id?: StringFilter<"Alarm"> | string
    type?: EnumalarmTypeNullableFilter<"Alarm"> | $Enums.alarmType | null
    title?: StringNullableFilter<"Alarm"> | string | null
    content?: StringNullableFilter<"Alarm"> | string | null
    created_date?: DateTimeNullableFilter<"Alarm"> | Date | string | null
    updated_date?: DateTimeNullableFilter<"Alarm"> | Date | string | null
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type AlarmOrderByWithRelationInput = {
    id?: SortOrder
    Account_id?: SortOrder
    type?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    created_date?: SortOrderInput | SortOrder
    updated_date?: SortOrderInput | SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type AlarmWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlarmWhereInput | AlarmWhereInput[]
    OR?: AlarmWhereInput[]
    NOT?: AlarmWhereInput | AlarmWhereInput[]
    Account_id?: StringFilter<"Alarm"> | string
    type?: EnumalarmTypeNullableFilter<"Alarm"> | $Enums.alarmType | null
    title?: StringNullableFilter<"Alarm"> | string | null
    content?: StringNullableFilter<"Alarm"> | string | null
    created_date?: DateTimeNullableFilter<"Alarm"> | Date | string | null
    updated_date?: DateTimeNullableFilter<"Alarm"> | Date | string | null
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }, "id">

  export type AlarmOrderByWithAggregationInput = {
    id?: SortOrder
    Account_id?: SortOrder
    type?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    created_date?: SortOrderInput | SortOrder
    updated_date?: SortOrderInput | SortOrder
    _count?: AlarmCountOrderByAggregateInput
    _avg?: AlarmAvgOrderByAggregateInput
    _max?: AlarmMaxOrderByAggregateInput
    _min?: AlarmMinOrderByAggregateInput
    _sum?: AlarmSumOrderByAggregateInput
  }

  export type AlarmScalarWhereWithAggregatesInput = {
    AND?: AlarmScalarWhereWithAggregatesInput | AlarmScalarWhereWithAggregatesInput[]
    OR?: AlarmScalarWhereWithAggregatesInput[]
    NOT?: AlarmScalarWhereWithAggregatesInput | AlarmScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Alarm"> | number
    Account_id?: StringWithAggregatesFilter<"Alarm"> | string
    type?: EnumalarmTypeNullableWithAggregatesFilter<"Alarm"> | $Enums.alarmType | null
    title?: StringNullableWithAggregatesFilter<"Alarm"> | string | null
    content?: StringNullableWithAggregatesFilter<"Alarm"> | string | null
    created_date?: DateTimeNullableWithAggregatesFilter<"Alarm"> | Date | string | null
    updated_date?: DateTimeNullableWithAggregatesFilter<"Alarm"> | Date | string | null
  }

  export type AccountMissionWhereInput = {
    AND?: AccountMissionWhereInput | AccountMissionWhereInput[]
    OR?: AccountMissionWhereInput[]
    NOT?: AccountMissionWhereInput | AccountMissionWhereInput[]
    Account_id?: StringFilter<"AccountMission"> | string
    Mission_id?: BigIntFilter<"AccountMission"> | bigint | number
    success?: EnumMissionStatusNullableFilter<"AccountMission"> | $Enums.MissionStatus | null
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    mission?: XOR<MissionRelationFilter, MissionWhereInput>
  }

  export type AccountMissionOrderByWithRelationInput = {
    Account_id?: SortOrder
    Mission_id?: SortOrder
    success?: SortOrderInput | SortOrder
    account?: AccountOrderByWithRelationInput
    mission?: MissionOrderByWithRelationInput
  }

  export type AccountMissionWhereUniqueInput = Prisma.AtLeast<{
    Account_id_Mission_id?: AccountMissionAccount_idMission_idCompoundUniqueInput
    AND?: AccountMissionWhereInput | AccountMissionWhereInput[]
    OR?: AccountMissionWhereInput[]
    NOT?: AccountMissionWhereInput | AccountMissionWhereInput[]
    Account_id?: StringFilter<"AccountMission"> | string
    Mission_id?: BigIntFilter<"AccountMission"> | bigint | number
    success?: EnumMissionStatusNullableFilter<"AccountMission"> | $Enums.MissionStatus | null
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    mission?: XOR<MissionRelationFilter, MissionWhereInput>
  }, "Account_id_Mission_id">

  export type AccountMissionOrderByWithAggregationInput = {
    Account_id?: SortOrder
    Mission_id?: SortOrder
    success?: SortOrderInput | SortOrder
    _count?: AccountMissionCountOrderByAggregateInput
    _avg?: AccountMissionAvgOrderByAggregateInput
    _max?: AccountMissionMaxOrderByAggregateInput
    _min?: AccountMissionMinOrderByAggregateInput
    _sum?: AccountMissionSumOrderByAggregateInput
  }

  export type AccountMissionScalarWhereWithAggregatesInput = {
    AND?: AccountMissionScalarWhereWithAggregatesInput | AccountMissionScalarWhereWithAggregatesInput[]
    OR?: AccountMissionScalarWhereWithAggregatesInput[]
    NOT?: AccountMissionScalarWhereWithAggregatesInput | AccountMissionScalarWhereWithAggregatesInput[]
    Account_id?: StringWithAggregatesFilter<"AccountMission"> | string
    Mission_id?: BigIntWithAggregatesFilter<"AccountMission"> | bigint | number
    success?: EnumMissionStatusNullableWithAggregatesFilter<"AccountMission"> | $Enums.MissionStatus | null
  }

  export type AccountCreateInput = {
    id?: string
    password: string
    name: string
    birthday: Date | string
    address: string
    nickname: string
    email: string
    gender?: number | null
    phone_number?: string | null
    status?: string | null
    inactive_date?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    savepoint?: number | null
    location_O: number
    marketing_O: number
    event_reception: number
    review_reception: number
    inquiry_reception: number
    korean_food?: number | null
    japan_food?: number | null
    china_food?: number | null
    western_food?: number | null
    chicken?: number | null
    snack_food?: number | null
    meat?: number | null
    lunchbox?: number | null
    LNS?: number | null
    fastfood?: number | null
    dessert?: number | null
    asian_food?: number | null
    reviews?: ReviewCreateNestedManyWithoutAccountInput
    inquiries?: InquiryCreateNestedManyWithoutAccountInput
    alarms?: AlarmCreateNestedManyWithoutAccountInput
    accountMissions?: AccountMissionCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    password: string
    name: string
    birthday: Date | string
    address: string
    nickname: string
    email: string
    gender?: number | null
    phone_number?: string | null
    status?: string | null
    inactive_date?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    savepoint?: number | null
    location_O: number
    marketing_O: number
    event_reception: number
    review_reception: number
    inquiry_reception: number
    korean_food?: number | null
    japan_food?: number | null
    china_food?: number | null
    western_food?: number | null
    chicken?: number | null
    snack_food?: number | null
    meat?: number | null
    lunchbox?: number | null
    LNS?: number | null
    fastfood?: number | null
    dessert?: number | null
    asian_food?: number | null
    reviews?: ReviewUncheckedCreateNestedManyWithoutAccountInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutAccountInput
    alarms?: AlarmUncheckedCreateNestedManyWithoutAccountInput
    accountMissions?: AccountMissionUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    savepoint?: NullableIntFieldUpdateOperationsInput | number | null
    location_O?: IntFieldUpdateOperationsInput | number
    marketing_O?: IntFieldUpdateOperationsInput | number
    event_reception?: IntFieldUpdateOperationsInput | number
    review_reception?: IntFieldUpdateOperationsInput | number
    inquiry_reception?: IntFieldUpdateOperationsInput | number
    korean_food?: NullableIntFieldUpdateOperationsInput | number | null
    japan_food?: NullableIntFieldUpdateOperationsInput | number | null
    china_food?: NullableIntFieldUpdateOperationsInput | number | null
    western_food?: NullableIntFieldUpdateOperationsInput | number | null
    chicken?: NullableIntFieldUpdateOperationsInput | number | null
    snack_food?: NullableIntFieldUpdateOperationsInput | number | null
    meat?: NullableIntFieldUpdateOperationsInput | number | null
    lunchbox?: NullableIntFieldUpdateOperationsInput | number | null
    LNS?: NullableIntFieldUpdateOperationsInput | number | null
    fastfood?: NullableIntFieldUpdateOperationsInput | number | null
    dessert?: NullableIntFieldUpdateOperationsInput | number | null
    asian_food?: NullableIntFieldUpdateOperationsInput | number | null
    reviews?: ReviewUpdateManyWithoutAccountNestedInput
    inquiries?: InquiryUpdateManyWithoutAccountNestedInput
    alarms?: AlarmUpdateManyWithoutAccountNestedInput
    accountMissions?: AccountMissionUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    savepoint?: NullableIntFieldUpdateOperationsInput | number | null
    location_O?: IntFieldUpdateOperationsInput | number
    marketing_O?: IntFieldUpdateOperationsInput | number
    event_reception?: IntFieldUpdateOperationsInput | number
    review_reception?: IntFieldUpdateOperationsInput | number
    inquiry_reception?: IntFieldUpdateOperationsInput | number
    korean_food?: NullableIntFieldUpdateOperationsInput | number | null
    japan_food?: NullableIntFieldUpdateOperationsInput | number | null
    china_food?: NullableIntFieldUpdateOperationsInput | number | null
    western_food?: NullableIntFieldUpdateOperationsInput | number | null
    chicken?: NullableIntFieldUpdateOperationsInput | number | null
    snack_food?: NullableIntFieldUpdateOperationsInput | number | null
    meat?: NullableIntFieldUpdateOperationsInput | number | null
    lunchbox?: NullableIntFieldUpdateOperationsInput | number | null
    LNS?: NullableIntFieldUpdateOperationsInput | number | null
    fastfood?: NullableIntFieldUpdateOperationsInput | number | null
    dessert?: NullableIntFieldUpdateOperationsInput | number | null
    asian_food?: NullableIntFieldUpdateOperationsInput | number | null
    reviews?: ReviewUncheckedUpdateManyWithoutAccountNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutAccountNestedInput
    alarms?: AlarmUncheckedUpdateManyWithoutAccountNestedInput
    accountMissions?: AccountMissionUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    id?: string
    password: string
    name: string
    birthday: Date | string
    address: string
    nickname: string
    email: string
    gender?: number | null
    phone_number?: string | null
    status?: string | null
    inactive_date?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    savepoint?: number | null
    location_O: number
    marketing_O: number
    event_reception: number
    review_reception: number
    inquiry_reception: number
    korean_food?: number | null
    japan_food?: number | null
    china_food?: number | null
    western_food?: number | null
    chicken?: number | null
    snack_food?: number | null
    meat?: number | null
    lunchbox?: number | null
    LNS?: number | null
    fastfood?: number | null
    dessert?: number | null
    asian_food?: number | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    savepoint?: NullableIntFieldUpdateOperationsInput | number | null
    location_O?: IntFieldUpdateOperationsInput | number
    marketing_O?: IntFieldUpdateOperationsInput | number
    event_reception?: IntFieldUpdateOperationsInput | number
    review_reception?: IntFieldUpdateOperationsInput | number
    inquiry_reception?: IntFieldUpdateOperationsInput | number
    korean_food?: NullableIntFieldUpdateOperationsInput | number | null
    japan_food?: NullableIntFieldUpdateOperationsInput | number | null
    china_food?: NullableIntFieldUpdateOperationsInput | number | null
    western_food?: NullableIntFieldUpdateOperationsInput | number | null
    chicken?: NullableIntFieldUpdateOperationsInput | number | null
    snack_food?: NullableIntFieldUpdateOperationsInput | number | null
    meat?: NullableIntFieldUpdateOperationsInput | number | null
    lunchbox?: NullableIntFieldUpdateOperationsInput | number | null
    LNS?: NullableIntFieldUpdateOperationsInput | number | null
    fastfood?: NullableIntFieldUpdateOperationsInput | number | null
    dessert?: NullableIntFieldUpdateOperationsInput | number | null
    asian_food?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    savepoint?: NullableIntFieldUpdateOperationsInput | number | null
    location_O?: IntFieldUpdateOperationsInput | number
    marketing_O?: IntFieldUpdateOperationsInput | number
    event_reception?: IntFieldUpdateOperationsInput | number
    review_reception?: IntFieldUpdateOperationsInput | number
    inquiry_reception?: IntFieldUpdateOperationsInput | number
    korean_food?: NullableIntFieldUpdateOperationsInput | number | null
    japan_food?: NullableIntFieldUpdateOperationsInput | number | null
    china_food?: NullableIntFieldUpdateOperationsInput | number | null
    western_food?: NullableIntFieldUpdateOperationsInput | number | null
    chicken?: NullableIntFieldUpdateOperationsInput | number | null
    snack_food?: NullableIntFieldUpdateOperationsInput | number | null
    meat?: NullableIntFieldUpdateOperationsInput | number | null
    lunchbox?: NullableIntFieldUpdateOperationsInput | number | null
    LNS?: NullableIntFieldUpdateOperationsInput | number | null
    fastfood?: NullableIntFieldUpdateOperationsInput | number | null
    dessert?: NullableIntFieldUpdateOperationsInput | number | null
    asian_food?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RestaurantCreateInput = {
    id?: bigint | number
    restaurant_name: string
    address: string
    type?: string | null
    picture?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
    inactive_date?: Date | string | null
    status?: string | null
    phone_number?: string | null
    reviews?: ReviewCreateNestedManyWithoutRestaurantInput
    missions?: MissionCreateNestedManyWithoutRestaurantInput
  }

  export type RestaurantUncheckedCreateInput = {
    id?: bigint | number
    restaurant_name: string
    address: string
    type?: string | null
    picture?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
    inactive_date?: Date | string | null
    status?: string | null
    phone_number?: string | null
    reviews?: ReviewUncheckedCreateNestedManyWithoutRestaurantInput
    missions?: MissionUncheckedCreateNestedManyWithoutRestaurantInput
  }

  export type RestaurantUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    restaurant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    reviews?: ReviewUpdateManyWithoutRestaurantNestedInput
    missions?: MissionUpdateManyWithoutRestaurantNestedInput
  }

  export type RestaurantUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    restaurant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    reviews?: ReviewUncheckedUpdateManyWithoutRestaurantNestedInput
    missions?: MissionUncheckedUpdateManyWithoutRestaurantNestedInput
  }

  export type RestaurantCreateManyInput = {
    id?: bigint | number
    restaurant_name: string
    address: string
    type?: string | null
    picture?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
    inactive_date?: Date | string | null
    status?: string | null
    phone_number?: string | null
  }

  export type RestaurantUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    restaurant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RestaurantUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    restaurant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewCreateInput = {
    id?: bigint | number
    score?: number | null
    picture?: string | null
    content?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
    restaurant: RestaurantCreateNestedOneWithoutReviewsInput
    account: AccountCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: bigint | number
    Restaurant_id: bigint | number
    Account_id: string
    score?: number | null
    picture?: string | null
    content?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
  }

  export type ReviewUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    restaurant?: RestaurantUpdateOneRequiredWithoutReviewsNestedInput
    account?: AccountUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    Restaurant_id?: BigIntFieldUpdateOperationsInput | bigint | number
    Account_id?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReviewCreateManyInput = {
    id?: bigint | number
    Restaurant_id: bigint | number
    Account_id: string
    score?: number | null
    picture?: string | null
    content?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
  }

  export type ReviewUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    Restaurant_id?: BigIntFieldUpdateOperationsInput | bigint | number
    Account_id?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MissionCreateInput = {
    id?: bigint | number
    mission_name: string
    deadline?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    count?: number | null
    mission_point?: number | null
    restaurant: RestaurantCreateNestedOneWithoutMissionsInput
    accountMissions?: AccountMissionCreateNestedManyWithoutMissionInput
  }

  export type MissionUncheckedCreateInput = {
    id?: bigint | number
    Restaurant_id: bigint | number
    mission_name: string
    deadline?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    count?: number | null
    mission_point?: number | null
    accountMissions?: AccountMissionUncheckedCreateNestedManyWithoutMissionInput
  }

  export type MissionUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    mission_name?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    mission_point?: NullableIntFieldUpdateOperationsInput | number | null
    restaurant?: RestaurantUpdateOneRequiredWithoutMissionsNestedInput
    accountMissions?: AccountMissionUpdateManyWithoutMissionNestedInput
  }

  export type MissionUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    Restaurant_id?: BigIntFieldUpdateOperationsInput | bigint | number
    mission_name?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    mission_point?: NullableIntFieldUpdateOperationsInput | number | null
    accountMissions?: AccountMissionUncheckedUpdateManyWithoutMissionNestedInput
  }

  export type MissionCreateManyInput = {
    id?: bigint | number
    Restaurant_id: bigint | number
    mission_name: string
    deadline?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    count?: number | null
    mission_point?: number | null
  }

  export type MissionUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    mission_name?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    mission_point?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MissionUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    Restaurant_id?: BigIntFieldUpdateOperationsInput | bigint | number
    mission_name?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    mission_point?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InquiryCreateInput = {
    title?: string | null
    image?: string | null
    content?: string | null
    waiting?: number | null
    created_date?: Date | string | null
    type?: string | null
    account: AccountCreateNestedOneWithoutInquiriesInput
  }

  export type InquiryUncheckedCreateInput = {
    id?: number
    Account_id: string
    title?: string | null
    image?: string | null
    content?: string | null
    waiting?: number | null
    created_date?: Date | string | null
    type?: string | null
  }

  export type InquiryUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    waiting?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    account?: AccountUpdateOneRequiredWithoutInquiriesNestedInput
  }

  export type InquiryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Account_id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    waiting?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InquiryCreateManyInput = {
    id?: number
    Account_id: string
    title?: string | null
    image?: string | null
    content?: string | null
    waiting?: number | null
    created_date?: Date | string | null
    type?: string | null
  }

  export type InquiryUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    waiting?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InquiryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Account_id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    waiting?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlarmCreateInput = {
    type?: $Enums.alarmType | null
    title?: string | null
    content?: string | null
    created_date?: Date | string | null
    updated_date?: Date | string | null
    account: AccountCreateNestedOneWithoutAlarmsInput
  }

  export type AlarmUncheckedCreateInput = {
    id?: number
    Account_id: string
    type?: $Enums.alarmType | null
    title?: string | null
    content?: string | null
    created_date?: Date | string | null
    updated_date?: Date | string | null
  }

  export type AlarmUpdateInput = {
    type?: NullableEnumalarmTypeFieldUpdateOperationsInput | $Enums.alarmType | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    account?: AccountUpdateOneRequiredWithoutAlarmsNestedInput
  }

  export type AlarmUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Account_id?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumalarmTypeFieldUpdateOperationsInput | $Enums.alarmType | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlarmCreateManyInput = {
    id?: number
    Account_id: string
    type?: $Enums.alarmType | null
    title?: string | null
    content?: string | null
    created_date?: Date | string | null
    updated_date?: Date | string | null
  }

  export type AlarmUpdateManyMutationInput = {
    type?: NullableEnumalarmTypeFieldUpdateOperationsInput | $Enums.alarmType | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlarmUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Account_id?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumalarmTypeFieldUpdateOperationsInput | $Enums.alarmType | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountMissionCreateInput = {
    success?: $Enums.MissionStatus | null
    account: AccountCreateNestedOneWithoutAccountMissionsInput
    mission: MissionCreateNestedOneWithoutAccountMissionsInput
  }

  export type AccountMissionUncheckedCreateInput = {
    Account_id: string
    Mission_id: bigint | number
    success?: $Enums.MissionStatus | null
  }

  export type AccountMissionUpdateInput = {
    success?: NullableEnumMissionStatusFieldUpdateOperationsInput | $Enums.MissionStatus | null
    account?: AccountUpdateOneRequiredWithoutAccountMissionsNestedInput
    mission?: MissionUpdateOneRequiredWithoutAccountMissionsNestedInput
  }

  export type AccountMissionUncheckedUpdateInput = {
    Account_id?: StringFieldUpdateOperationsInput | string
    Mission_id?: BigIntFieldUpdateOperationsInput | bigint | number
    success?: NullableEnumMissionStatusFieldUpdateOperationsInput | $Enums.MissionStatus | null
  }

  export type AccountMissionCreateManyInput = {
    Account_id: string
    Mission_id: bigint | number
    success?: $Enums.MissionStatus | null
  }

  export type AccountMissionUpdateManyMutationInput = {
    success?: NullableEnumMissionStatusFieldUpdateOperationsInput | $Enums.MissionStatus | null
  }

  export type AccountMissionUncheckedUpdateManyInput = {
    Account_id?: StringFieldUpdateOperationsInput | string
    Mission_id?: BigIntFieldUpdateOperationsInput | bigint | number
    success?: NullableEnumMissionStatusFieldUpdateOperationsInput | $Enums.MissionStatus | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type InquiryListRelationFilter = {
    every?: InquiryWhereInput
    some?: InquiryWhereInput
    none?: InquiryWhereInput
  }

  export type AlarmListRelationFilter = {
    every?: AlarmWhereInput
    some?: AlarmWhereInput
    none?: AlarmWhereInput
  }

  export type AccountMissionListRelationFilter = {
    every?: AccountMissionWhereInput
    some?: AccountMissionWhereInput
    none?: AccountMissionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InquiryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlarmOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountMissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    address?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phone_number?: SortOrder
    status?: SortOrder
    inactive_date?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
    savepoint?: SortOrder
    location_O?: SortOrder
    marketing_O?: SortOrder
    event_reception?: SortOrder
    review_reception?: SortOrder
    inquiry_reception?: SortOrder
    korean_food?: SortOrder
    japan_food?: SortOrder
    china_food?: SortOrder
    western_food?: SortOrder
    chicken?: SortOrder
    snack_food?: SortOrder
    meat?: SortOrder
    lunchbox?: SortOrder
    LNS?: SortOrder
    fastfood?: SortOrder
    dessert?: SortOrder
    asian_food?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    gender?: SortOrder
    savepoint?: SortOrder
    location_O?: SortOrder
    marketing_O?: SortOrder
    event_reception?: SortOrder
    review_reception?: SortOrder
    inquiry_reception?: SortOrder
    korean_food?: SortOrder
    japan_food?: SortOrder
    china_food?: SortOrder
    western_food?: SortOrder
    chicken?: SortOrder
    snack_food?: SortOrder
    meat?: SortOrder
    lunchbox?: SortOrder
    LNS?: SortOrder
    fastfood?: SortOrder
    dessert?: SortOrder
    asian_food?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    address?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phone_number?: SortOrder
    status?: SortOrder
    inactive_date?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
    savepoint?: SortOrder
    location_O?: SortOrder
    marketing_O?: SortOrder
    event_reception?: SortOrder
    review_reception?: SortOrder
    inquiry_reception?: SortOrder
    korean_food?: SortOrder
    japan_food?: SortOrder
    china_food?: SortOrder
    western_food?: SortOrder
    chicken?: SortOrder
    snack_food?: SortOrder
    meat?: SortOrder
    lunchbox?: SortOrder
    LNS?: SortOrder
    fastfood?: SortOrder
    dessert?: SortOrder
    asian_food?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    name?: SortOrder
    birthday?: SortOrder
    address?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phone_number?: SortOrder
    status?: SortOrder
    inactive_date?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
    savepoint?: SortOrder
    location_O?: SortOrder
    marketing_O?: SortOrder
    event_reception?: SortOrder
    review_reception?: SortOrder
    inquiry_reception?: SortOrder
    korean_food?: SortOrder
    japan_food?: SortOrder
    china_food?: SortOrder
    western_food?: SortOrder
    chicken?: SortOrder
    snack_food?: SortOrder
    meat?: SortOrder
    lunchbox?: SortOrder
    LNS?: SortOrder
    fastfood?: SortOrder
    dessert?: SortOrder
    asian_food?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    gender?: SortOrder
    savepoint?: SortOrder
    location_O?: SortOrder
    marketing_O?: SortOrder
    event_reception?: SortOrder
    review_reception?: SortOrder
    inquiry_reception?: SortOrder
    korean_food?: SortOrder
    japan_food?: SortOrder
    china_food?: SortOrder
    western_food?: SortOrder
    chicken?: SortOrder
    snack_food?: SortOrder
    meat?: SortOrder
    lunchbox?: SortOrder
    LNS?: SortOrder
    fastfood?: SortOrder
    dessert?: SortOrder
    asian_food?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type MissionListRelationFilter = {
    every?: MissionWhereInput
    some?: MissionWhereInput
    none?: MissionWhereInput
  }

  export type MissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RestaurantCountOrderByAggregateInput = {
    id?: SortOrder
    restaurant_name?: SortOrder
    address?: SortOrder
    type?: SortOrder
    picture?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
    inactive_date?: SortOrder
    status?: SortOrder
    phone_number?: SortOrder
  }

  export type RestaurantAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RestaurantMaxOrderByAggregateInput = {
    id?: SortOrder
    restaurant_name?: SortOrder
    address?: SortOrder
    type?: SortOrder
    picture?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
    inactive_date?: SortOrder
    status?: SortOrder
    phone_number?: SortOrder
  }

  export type RestaurantMinOrderByAggregateInput = {
    id?: SortOrder
    restaurant_name?: SortOrder
    address?: SortOrder
    type?: SortOrder
    picture?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
    inactive_date?: SortOrder
    status?: SortOrder
    phone_number?: SortOrder
  }

  export type RestaurantSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type RestaurantRelationFilter = {
    is?: RestaurantWhereInput
    isNot?: RestaurantWhereInput
  }

  export type AccountRelationFilter = {
    is?: AccountWhereInput
    isNot?: AccountWhereInput
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    Restaurant_id?: SortOrder
    Account_id?: SortOrder
    score?: SortOrder
    picture?: SortOrder
    content?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    Restaurant_id?: SortOrder
    score?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    Restaurant_id?: SortOrder
    Account_id?: SortOrder
    score?: SortOrder
    picture?: SortOrder
    content?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    Restaurant_id?: SortOrder
    Account_id?: SortOrder
    score?: SortOrder
    picture?: SortOrder
    content?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    id?: SortOrder
    Restaurant_id?: SortOrder
    score?: SortOrder
  }

  export type MissionCountOrderByAggregateInput = {
    id?: SortOrder
    Restaurant_id?: SortOrder
    mission_name?: SortOrder
    deadline?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
    count?: SortOrder
    mission_point?: SortOrder
  }

  export type MissionAvgOrderByAggregateInput = {
    id?: SortOrder
    Restaurant_id?: SortOrder
    count?: SortOrder
    mission_point?: SortOrder
  }

  export type MissionMaxOrderByAggregateInput = {
    id?: SortOrder
    Restaurant_id?: SortOrder
    mission_name?: SortOrder
    deadline?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
    count?: SortOrder
    mission_point?: SortOrder
  }

  export type MissionMinOrderByAggregateInput = {
    id?: SortOrder
    Restaurant_id?: SortOrder
    mission_name?: SortOrder
    deadline?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
    count?: SortOrder
    mission_point?: SortOrder
  }

  export type MissionSumOrderByAggregateInput = {
    id?: SortOrder
    Restaurant_id?: SortOrder
    count?: SortOrder
    mission_point?: SortOrder
  }

  export type InquiryCountOrderByAggregateInput = {
    id?: SortOrder
    Account_id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    content?: SortOrder
    waiting?: SortOrder
    created_date?: SortOrder
    type?: SortOrder
  }

  export type InquiryAvgOrderByAggregateInput = {
    id?: SortOrder
    waiting?: SortOrder
  }

  export type InquiryMaxOrderByAggregateInput = {
    id?: SortOrder
    Account_id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    content?: SortOrder
    waiting?: SortOrder
    created_date?: SortOrder
    type?: SortOrder
  }

  export type InquiryMinOrderByAggregateInput = {
    id?: SortOrder
    Account_id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    content?: SortOrder
    waiting?: SortOrder
    created_date?: SortOrder
    type?: SortOrder
  }

  export type InquirySumOrderByAggregateInput = {
    id?: SortOrder
    waiting?: SortOrder
  }

  export type EnumalarmTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.alarmType | EnumalarmTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.alarmType[] | null
    notIn?: $Enums.alarmType[] | null
    not?: NestedEnumalarmTypeNullableFilter<$PrismaModel> | $Enums.alarmType | null
  }

  export type AlarmCountOrderByAggregateInput = {
    id?: SortOrder
    Account_id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
  }

  export type AlarmAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AlarmMaxOrderByAggregateInput = {
    id?: SortOrder
    Account_id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
  }

  export type AlarmMinOrderByAggregateInput = {
    id?: SortOrder
    Account_id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
  }

  export type AlarmSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumalarmTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.alarmType | EnumalarmTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.alarmType[] | null
    notIn?: $Enums.alarmType[] | null
    not?: NestedEnumalarmTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.alarmType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumalarmTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumalarmTypeNullableFilter<$PrismaModel>
  }

  export type EnumMissionStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MissionStatus | EnumMissionStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MissionStatus[] | null
    notIn?: $Enums.MissionStatus[] | null
    not?: NestedEnumMissionStatusNullableFilter<$PrismaModel> | $Enums.MissionStatus | null
  }

  export type MissionRelationFilter = {
    is?: MissionWhereInput
    isNot?: MissionWhereInput
  }

  export type AccountMissionAccount_idMission_idCompoundUniqueInput = {
    Account_id: string
    Mission_id: bigint | number
  }

  export type AccountMissionCountOrderByAggregateInput = {
    Account_id?: SortOrder
    Mission_id?: SortOrder
    success?: SortOrder
  }

  export type AccountMissionAvgOrderByAggregateInput = {
    Mission_id?: SortOrder
  }

  export type AccountMissionMaxOrderByAggregateInput = {
    Account_id?: SortOrder
    Mission_id?: SortOrder
    success?: SortOrder
  }

  export type AccountMissionMinOrderByAggregateInput = {
    Account_id?: SortOrder
    Mission_id?: SortOrder
    success?: SortOrder
  }

  export type AccountMissionSumOrderByAggregateInput = {
    Mission_id?: SortOrder
  }

  export type EnumMissionStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MissionStatus | EnumMissionStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MissionStatus[] | null
    notIn?: $Enums.MissionStatus[] | null
    not?: NestedEnumMissionStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.MissionStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMissionStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumMissionStatusNullableFilter<$PrismaModel>
  }

  export type ReviewCreateNestedManyWithoutAccountInput = {
    create?: XOR<ReviewCreateWithoutAccountInput, ReviewUncheckedCreateWithoutAccountInput> | ReviewCreateWithoutAccountInput[] | ReviewUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAccountInput | ReviewCreateOrConnectWithoutAccountInput[]
    createMany?: ReviewCreateManyAccountInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type InquiryCreateNestedManyWithoutAccountInput = {
    create?: XOR<InquiryCreateWithoutAccountInput, InquiryUncheckedCreateWithoutAccountInput> | InquiryCreateWithoutAccountInput[] | InquiryUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutAccountInput | InquiryCreateOrConnectWithoutAccountInput[]
    createMany?: InquiryCreateManyAccountInputEnvelope
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
  }

  export type AlarmCreateNestedManyWithoutAccountInput = {
    create?: XOR<AlarmCreateWithoutAccountInput, AlarmUncheckedCreateWithoutAccountInput> | AlarmCreateWithoutAccountInput[] | AlarmUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AlarmCreateOrConnectWithoutAccountInput | AlarmCreateOrConnectWithoutAccountInput[]
    createMany?: AlarmCreateManyAccountInputEnvelope
    connect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
  }

  export type AccountMissionCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountMissionCreateWithoutAccountInput, AccountMissionUncheckedCreateWithoutAccountInput> | AccountMissionCreateWithoutAccountInput[] | AccountMissionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountMissionCreateOrConnectWithoutAccountInput | AccountMissionCreateOrConnectWithoutAccountInput[]
    createMany?: AccountMissionCreateManyAccountInputEnvelope
    connect?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<ReviewCreateWithoutAccountInput, ReviewUncheckedCreateWithoutAccountInput> | ReviewCreateWithoutAccountInput[] | ReviewUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAccountInput | ReviewCreateOrConnectWithoutAccountInput[]
    createMany?: ReviewCreateManyAccountInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type InquiryUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<InquiryCreateWithoutAccountInput, InquiryUncheckedCreateWithoutAccountInput> | InquiryCreateWithoutAccountInput[] | InquiryUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutAccountInput | InquiryCreateOrConnectWithoutAccountInput[]
    createMany?: InquiryCreateManyAccountInputEnvelope
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
  }

  export type AlarmUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<AlarmCreateWithoutAccountInput, AlarmUncheckedCreateWithoutAccountInput> | AlarmCreateWithoutAccountInput[] | AlarmUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AlarmCreateOrConnectWithoutAccountInput | AlarmCreateOrConnectWithoutAccountInput[]
    createMany?: AlarmCreateManyAccountInputEnvelope
    connect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
  }

  export type AccountMissionUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountMissionCreateWithoutAccountInput, AccountMissionUncheckedCreateWithoutAccountInput> | AccountMissionCreateWithoutAccountInput[] | AccountMissionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountMissionCreateOrConnectWithoutAccountInput | AccountMissionCreateOrConnectWithoutAccountInput[]
    createMany?: AccountMissionCreateManyAccountInputEnvelope
    connect?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ReviewUpdateManyWithoutAccountNestedInput = {
    create?: XOR<ReviewCreateWithoutAccountInput, ReviewUncheckedCreateWithoutAccountInput> | ReviewCreateWithoutAccountInput[] | ReviewUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAccountInput | ReviewCreateOrConnectWithoutAccountInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutAccountInput | ReviewUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: ReviewCreateManyAccountInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutAccountInput | ReviewUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutAccountInput | ReviewUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type InquiryUpdateManyWithoutAccountNestedInput = {
    create?: XOR<InquiryCreateWithoutAccountInput, InquiryUncheckedCreateWithoutAccountInput> | InquiryCreateWithoutAccountInput[] | InquiryUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutAccountInput | InquiryCreateOrConnectWithoutAccountInput[]
    upsert?: InquiryUpsertWithWhereUniqueWithoutAccountInput | InquiryUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: InquiryCreateManyAccountInputEnvelope
    set?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    disconnect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    delete?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    update?: InquiryUpdateWithWhereUniqueWithoutAccountInput | InquiryUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: InquiryUpdateManyWithWhereWithoutAccountInput | InquiryUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
  }

  export type AlarmUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AlarmCreateWithoutAccountInput, AlarmUncheckedCreateWithoutAccountInput> | AlarmCreateWithoutAccountInput[] | AlarmUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AlarmCreateOrConnectWithoutAccountInput | AlarmCreateOrConnectWithoutAccountInput[]
    upsert?: AlarmUpsertWithWhereUniqueWithoutAccountInput | AlarmUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AlarmCreateManyAccountInputEnvelope
    set?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    disconnect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    delete?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    connect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    update?: AlarmUpdateWithWhereUniqueWithoutAccountInput | AlarmUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AlarmUpdateManyWithWhereWithoutAccountInput | AlarmUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AlarmScalarWhereInput | AlarmScalarWhereInput[]
  }

  export type AccountMissionUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountMissionCreateWithoutAccountInput, AccountMissionUncheckedCreateWithoutAccountInput> | AccountMissionCreateWithoutAccountInput[] | AccountMissionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountMissionCreateOrConnectWithoutAccountInput | AccountMissionCreateOrConnectWithoutAccountInput[]
    upsert?: AccountMissionUpsertWithWhereUniqueWithoutAccountInput | AccountMissionUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountMissionCreateManyAccountInputEnvelope
    set?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    disconnect?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    delete?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    connect?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    update?: AccountMissionUpdateWithWhereUniqueWithoutAccountInput | AccountMissionUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountMissionUpdateManyWithWhereWithoutAccountInput | AccountMissionUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountMissionScalarWhereInput | AccountMissionScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<ReviewCreateWithoutAccountInput, ReviewUncheckedCreateWithoutAccountInput> | ReviewCreateWithoutAccountInput[] | ReviewUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAccountInput | ReviewCreateOrConnectWithoutAccountInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutAccountInput | ReviewUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: ReviewCreateManyAccountInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutAccountInput | ReviewUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutAccountInput | ReviewUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type InquiryUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<InquiryCreateWithoutAccountInput, InquiryUncheckedCreateWithoutAccountInput> | InquiryCreateWithoutAccountInput[] | InquiryUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutAccountInput | InquiryCreateOrConnectWithoutAccountInput[]
    upsert?: InquiryUpsertWithWhereUniqueWithoutAccountInput | InquiryUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: InquiryCreateManyAccountInputEnvelope
    set?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    disconnect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    delete?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    update?: InquiryUpdateWithWhereUniqueWithoutAccountInput | InquiryUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: InquiryUpdateManyWithWhereWithoutAccountInput | InquiryUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
  }

  export type AlarmUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AlarmCreateWithoutAccountInput, AlarmUncheckedCreateWithoutAccountInput> | AlarmCreateWithoutAccountInput[] | AlarmUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AlarmCreateOrConnectWithoutAccountInput | AlarmCreateOrConnectWithoutAccountInput[]
    upsert?: AlarmUpsertWithWhereUniqueWithoutAccountInput | AlarmUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AlarmCreateManyAccountInputEnvelope
    set?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    disconnect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    delete?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    connect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    update?: AlarmUpdateWithWhereUniqueWithoutAccountInput | AlarmUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AlarmUpdateManyWithWhereWithoutAccountInput | AlarmUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AlarmScalarWhereInput | AlarmScalarWhereInput[]
  }

  export type AccountMissionUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountMissionCreateWithoutAccountInput, AccountMissionUncheckedCreateWithoutAccountInput> | AccountMissionCreateWithoutAccountInput[] | AccountMissionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountMissionCreateOrConnectWithoutAccountInput | AccountMissionCreateOrConnectWithoutAccountInput[]
    upsert?: AccountMissionUpsertWithWhereUniqueWithoutAccountInput | AccountMissionUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountMissionCreateManyAccountInputEnvelope
    set?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    disconnect?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    delete?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    connect?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    update?: AccountMissionUpdateWithWhereUniqueWithoutAccountInput | AccountMissionUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountMissionUpdateManyWithWhereWithoutAccountInput | AccountMissionUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountMissionScalarWhereInput | AccountMissionScalarWhereInput[]
  }

  export type ReviewCreateNestedManyWithoutRestaurantInput = {
    create?: XOR<ReviewCreateWithoutRestaurantInput, ReviewUncheckedCreateWithoutRestaurantInput> | ReviewCreateWithoutRestaurantInput[] | ReviewUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutRestaurantInput | ReviewCreateOrConnectWithoutRestaurantInput[]
    createMany?: ReviewCreateManyRestaurantInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type MissionCreateNestedManyWithoutRestaurantInput = {
    create?: XOR<MissionCreateWithoutRestaurantInput, MissionUncheckedCreateWithoutRestaurantInput> | MissionCreateWithoutRestaurantInput[] | MissionUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: MissionCreateOrConnectWithoutRestaurantInput | MissionCreateOrConnectWithoutRestaurantInput[]
    createMany?: MissionCreateManyRestaurantInputEnvelope
    connect?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutRestaurantInput = {
    create?: XOR<ReviewCreateWithoutRestaurantInput, ReviewUncheckedCreateWithoutRestaurantInput> | ReviewCreateWithoutRestaurantInput[] | ReviewUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutRestaurantInput | ReviewCreateOrConnectWithoutRestaurantInput[]
    createMany?: ReviewCreateManyRestaurantInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type MissionUncheckedCreateNestedManyWithoutRestaurantInput = {
    create?: XOR<MissionCreateWithoutRestaurantInput, MissionUncheckedCreateWithoutRestaurantInput> | MissionCreateWithoutRestaurantInput[] | MissionUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: MissionCreateOrConnectWithoutRestaurantInput | MissionCreateOrConnectWithoutRestaurantInput[]
    createMany?: MissionCreateManyRestaurantInputEnvelope
    connect?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type ReviewUpdateManyWithoutRestaurantNestedInput = {
    create?: XOR<ReviewCreateWithoutRestaurantInput, ReviewUncheckedCreateWithoutRestaurantInput> | ReviewCreateWithoutRestaurantInput[] | ReviewUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutRestaurantInput | ReviewCreateOrConnectWithoutRestaurantInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutRestaurantInput | ReviewUpsertWithWhereUniqueWithoutRestaurantInput[]
    createMany?: ReviewCreateManyRestaurantInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutRestaurantInput | ReviewUpdateWithWhereUniqueWithoutRestaurantInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutRestaurantInput | ReviewUpdateManyWithWhereWithoutRestaurantInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type MissionUpdateManyWithoutRestaurantNestedInput = {
    create?: XOR<MissionCreateWithoutRestaurantInput, MissionUncheckedCreateWithoutRestaurantInput> | MissionCreateWithoutRestaurantInput[] | MissionUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: MissionCreateOrConnectWithoutRestaurantInput | MissionCreateOrConnectWithoutRestaurantInput[]
    upsert?: MissionUpsertWithWhereUniqueWithoutRestaurantInput | MissionUpsertWithWhereUniqueWithoutRestaurantInput[]
    createMany?: MissionCreateManyRestaurantInputEnvelope
    set?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    disconnect?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    delete?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    connect?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    update?: MissionUpdateWithWhereUniqueWithoutRestaurantInput | MissionUpdateWithWhereUniqueWithoutRestaurantInput[]
    updateMany?: MissionUpdateManyWithWhereWithoutRestaurantInput | MissionUpdateManyWithWhereWithoutRestaurantInput[]
    deleteMany?: MissionScalarWhereInput | MissionScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutRestaurantNestedInput = {
    create?: XOR<ReviewCreateWithoutRestaurantInput, ReviewUncheckedCreateWithoutRestaurantInput> | ReviewCreateWithoutRestaurantInput[] | ReviewUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutRestaurantInput | ReviewCreateOrConnectWithoutRestaurantInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutRestaurantInput | ReviewUpsertWithWhereUniqueWithoutRestaurantInput[]
    createMany?: ReviewCreateManyRestaurantInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutRestaurantInput | ReviewUpdateWithWhereUniqueWithoutRestaurantInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutRestaurantInput | ReviewUpdateManyWithWhereWithoutRestaurantInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type MissionUncheckedUpdateManyWithoutRestaurantNestedInput = {
    create?: XOR<MissionCreateWithoutRestaurantInput, MissionUncheckedCreateWithoutRestaurantInput> | MissionCreateWithoutRestaurantInput[] | MissionUncheckedCreateWithoutRestaurantInput[]
    connectOrCreate?: MissionCreateOrConnectWithoutRestaurantInput | MissionCreateOrConnectWithoutRestaurantInput[]
    upsert?: MissionUpsertWithWhereUniqueWithoutRestaurantInput | MissionUpsertWithWhereUniqueWithoutRestaurantInput[]
    createMany?: MissionCreateManyRestaurantInputEnvelope
    set?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    disconnect?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    delete?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    connect?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    update?: MissionUpdateWithWhereUniqueWithoutRestaurantInput | MissionUpdateWithWhereUniqueWithoutRestaurantInput[]
    updateMany?: MissionUpdateManyWithWhereWithoutRestaurantInput | MissionUpdateManyWithWhereWithoutRestaurantInput[]
    deleteMany?: MissionScalarWhereInput | MissionScalarWhereInput[]
  }

  export type RestaurantCreateNestedOneWithoutReviewsInput = {
    create?: XOR<RestaurantCreateWithoutReviewsInput, RestaurantUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: RestaurantCreateOrConnectWithoutReviewsInput
    connect?: RestaurantWhereUniqueInput
  }

  export type AccountCreateNestedOneWithoutReviewsInput = {
    create?: XOR<AccountCreateWithoutReviewsInput, AccountUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutReviewsInput
    connect?: AccountWhereUniqueInput
  }

  export type RestaurantUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<RestaurantCreateWithoutReviewsInput, RestaurantUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: RestaurantCreateOrConnectWithoutReviewsInput
    upsert?: RestaurantUpsertWithoutReviewsInput
    connect?: RestaurantWhereUniqueInput
    update?: XOR<XOR<RestaurantUpdateToOneWithWhereWithoutReviewsInput, RestaurantUpdateWithoutReviewsInput>, RestaurantUncheckedUpdateWithoutReviewsInput>
  }

  export type AccountUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<AccountCreateWithoutReviewsInput, AccountUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutReviewsInput
    upsert?: AccountUpsertWithoutReviewsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutReviewsInput, AccountUpdateWithoutReviewsInput>, AccountUncheckedUpdateWithoutReviewsInput>
  }

  export type RestaurantCreateNestedOneWithoutMissionsInput = {
    create?: XOR<RestaurantCreateWithoutMissionsInput, RestaurantUncheckedCreateWithoutMissionsInput>
    connectOrCreate?: RestaurantCreateOrConnectWithoutMissionsInput
    connect?: RestaurantWhereUniqueInput
  }

  export type AccountMissionCreateNestedManyWithoutMissionInput = {
    create?: XOR<AccountMissionCreateWithoutMissionInput, AccountMissionUncheckedCreateWithoutMissionInput> | AccountMissionCreateWithoutMissionInput[] | AccountMissionUncheckedCreateWithoutMissionInput[]
    connectOrCreate?: AccountMissionCreateOrConnectWithoutMissionInput | AccountMissionCreateOrConnectWithoutMissionInput[]
    createMany?: AccountMissionCreateManyMissionInputEnvelope
    connect?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
  }

  export type AccountMissionUncheckedCreateNestedManyWithoutMissionInput = {
    create?: XOR<AccountMissionCreateWithoutMissionInput, AccountMissionUncheckedCreateWithoutMissionInput> | AccountMissionCreateWithoutMissionInput[] | AccountMissionUncheckedCreateWithoutMissionInput[]
    connectOrCreate?: AccountMissionCreateOrConnectWithoutMissionInput | AccountMissionCreateOrConnectWithoutMissionInput[]
    createMany?: AccountMissionCreateManyMissionInputEnvelope
    connect?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
  }

  export type RestaurantUpdateOneRequiredWithoutMissionsNestedInput = {
    create?: XOR<RestaurantCreateWithoutMissionsInput, RestaurantUncheckedCreateWithoutMissionsInput>
    connectOrCreate?: RestaurantCreateOrConnectWithoutMissionsInput
    upsert?: RestaurantUpsertWithoutMissionsInput
    connect?: RestaurantWhereUniqueInput
    update?: XOR<XOR<RestaurantUpdateToOneWithWhereWithoutMissionsInput, RestaurantUpdateWithoutMissionsInput>, RestaurantUncheckedUpdateWithoutMissionsInput>
  }

  export type AccountMissionUpdateManyWithoutMissionNestedInput = {
    create?: XOR<AccountMissionCreateWithoutMissionInput, AccountMissionUncheckedCreateWithoutMissionInput> | AccountMissionCreateWithoutMissionInput[] | AccountMissionUncheckedCreateWithoutMissionInput[]
    connectOrCreate?: AccountMissionCreateOrConnectWithoutMissionInput | AccountMissionCreateOrConnectWithoutMissionInput[]
    upsert?: AccountMissionUpsertWithWhereUniqueWithoutMissionInput | AccountMissionUpsertWithWhereUniqueWithoutMissionInput[]
    createMany?: AccountMissionCreateManyMissionInputEnvelope
    set?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    disconnect?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    delete?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    connect?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    update?: AccountMissionUpdateWithWhereUniqueWithoutMissionInput | AccountMissionUpdateWithWhereUniqueWithoutMissionInput[]
    updateMany?: AccountMissionUpdateManyWithWhereWithoutMissionInput | AccountMissionUpdateManyWithWhereWithoutMissionInput[]
    deleteMany?: AccountMissionScalarWhereInput | AccountMissionScalarWhereInput[]
  }

  export type AccountMissionUncheckedUpdateManyWithoutMissionNestedInput = {
    create?: XOR<AccountMissionCreateWithoutMissionInput, AccountMissionUncheckedCreateWithoutMissionInput> | AccountMissionCreateWithoutMissionInput[] | AccountMissionUncheckedCreateWithoutMissionInput[]
    connectOrCreate?: AccountMissionCreateOrConnectWithoutMissionInput | AccountMissionCreateOrConnectWithoutMissionInput[]
    upsert?: AccountMissionUpsertWithWhereUniqueWithoutMissionInput | AccountMissionUpsertWithWhereUniqueWithoutMissionInput[]
    createMany?: AccountMissionCreateManyMissionInputEnvelope
    set?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    disconnect?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    delete?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    connect?: AccountMissionWhereUniqueInput | AccountMissionWhereUniqueInput[]
    update?: AccountMissionUpdateWithWhereUniqueWithoutMissionInput | AccountMissionUpdateWithWhereUniqueWithoutMissionInput[]
    updateMany?: AccountMissionUpdateManyWithWhereWithoutMissionInput | AccountMissionUpdateManyWithWhereWithoutMissionInput[]
    deleteMany?: AccountMissionScalarWhereInput | AccountMissionScalarWhereInput[]
  }

  export type AccountCreateNestedOneWithoutInquiriesInput = {
    create?: XOR<AccountCreateWithoutInquiriesInput, AccountUncheckedCreateWithoutInquiriesInput>
    connectOrCreate?: AccountCreateOrConnectWithoutInquiriesInput
    connect?: AccountWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutInquiriesNestedInput = {
    create?: XOR<AccountCreateWithoutInquiriesInput, AccountUncheckedCreateWithoutInquiriesInput>
    connectOrCreate?: AccountCreateOrConnectWithoutInquiriesInput
    upsert?: AccountUpsertWithoutInquiriesInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutInquiriesInput, AccountUpdateWithoutInquiriesInput>, AccountUncheckedUpdateWithoutInquiriesInput>
  }

  export type AccountCreateNestedOneWithoutAlarmsInput = {
    create?: XOR<AccountCreateWithoutAlarmsInput, AccountUncheckedCreateWithoutAlarmsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutAlarmsInput
    connect?: AccountWhereUniqueInput
  }

  export type NullableEnumalarmTypeFieldUpdateOperationsInput = {
    set?: $Enums.alarmType | null
  }

  export type AccountUpdateOneRequiredWithoutAlarmsNestedInput = {
    create?: XOR<AccountCreateWithoutAlarmsInput, AccountUncheckedCreateWithoutAlarmsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutAlarmsInput
    upsert?: AccountUpsertWithoutAlarmsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutAlarmsInput, AccountUpdateWithoutAlarmsInput>, AccountUncheckedUpdateWithoutAlarmsInput>
  }

  export type AccountCreateNestedOneWithoutAccountMissionsInput = {
    create?: XOR<AccountCreateWithoutAccountMissionsInput, AccountUncheckedCreateWithoutAccountMissionsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutAccountMissionsInput
    connect?: AccountWhereUniqueInput
  }

  export type MissionCreateNestedOneWithoutAccountMissionsInput = {
    create?: XOR<MissionCreateWithoutAccountMissionsInput, MissionUncheckedCreateWithoutAccountMissionsInput>
    connectOrCreate?: MissionCreateOrConnectWithoutAccountMissionsInput
    connect?: MissionWhereUniqueInput
  }

  export type NullableEnumMissionStatusFieldUpdateOperationsInput = {
    set?: $Enums.MissionStatus | null
  }

  export type AccountUpdateOneRequiredWithoutAccountMissionsNestedInput = {
    create?: XOR<AccountCreateWithoutAccountMissionsInput, AccountUncheckedCreateWithoutAccountMissionsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutAccountMissionsInput
    upsert?: AccountUpsertWithoutAccountMissionsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutAccountMissionsInput, AccountUpdateWithoutAccountMissionsInput>, AccountUncheckedUpdateWithoutAccountMissionsInput>
  }

  export type MissionUpdateOneRequiredWithoutAccountMissionsNestedInput = {
    create?: XOR<MissionCreateWithoutAccountMissionsInput, MissionUncheckedCreateWithoutAccountMissionsInput>
    connectOrCreate?: MissionCreateOrConnectWithoutAccountMissionsInput
    upsert?: MissionUpsertWithoutAccountMissionsInput
    connect?: MissionWhereUniqueInput
    update?: XOR<XOR<MissionUpdateToOneWithWhereWithoutAccountMissionsInput, MissionUpdateWithoutAccountMissionsInput>, MissionUncheckedUpdateWithoutAccountMissionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedEnumalarmTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.alarmType | EnumalarmTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.alarmType[] | null
    notIn?: $Enums.alarmType[] | null
    not?: NestedEnumalarmTypeNullableFilter<$PrismaModel> | $Enums.alarmType | null
  }

  export type NestedEnumalarmTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.alarmType | EnumalarmTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.alarmType[] | null
    notIn?: $Enums.alarmType[] | null
    not?: NestedEnumalarmTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.alarmType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumalarmTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumalarmTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumMissionStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MissionStatus | EnumMissionStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MissionStatus[] | null
    notIn?: $Enums.MissionStatus[] | null
    not?: NestedEnumMissionStatusNullableFilter<$PrismaModel> | $Enums.MissionStatus | null
  }

  export type NestedEnumMissionStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MissionStatus | EnumMissionStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MissionStatus[] | null
    notIn?: $Enums.MissionStatus[] | null
    not?: NestedEnumMissionStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.MissionStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMissionStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumMissionStatusNullableFilter<$PrismaModel>
  }

  export type ReviewCreateWithoutAccountInput = {
    id?: bigint | number
    score?: number | null
    picture?: string | null
    content?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
    restaurant: RestaurantCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutAccountInput = {
    id?: bigint | number
    Restaurant_id: bigint | number
    score?: number | null
    picture?: string | null
    content?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
  }

  export type ReviewCreateOrConnectWithoutAccountInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutAccountInput, ReviewUncheckedCreateWithoutAccountInput>
  }

  export type ReviewCreateManyAccountInputEnvelope = {
    data: ReviewCreateManyAccountInput | ReviewCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type InquiryCreateWithoutAccountInput = {
    title?: string | null
    image?: string | null
    content?: string | null
    waiting?: number | null
    created_date?: Date | string | null
    type?: string | null
  }

  export type InquiryUncheckedCreateWithoutAccountInput = {
    id?: number
    title?: string | null
    image?: string | null
    content?: string | null
    waiting?: number | null
    created_date?: Date | string | null
    type?: string | null
  }

  export type InquiryCreateOrConnectWithoutAccountInput = {
    where: InquiryWhereUniqueInput
    create: XOR<InquiryCreateWithoutAccountInput, InquiryUncheckedCreateWithoutAccountInput>
  }

  export type InquiryCreateManyAccountInputEnvelope = {
    data: InquiryCreateManyAccountInput | InquiryCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type AlarmCreateWithoutAccountInput = {
    type?: $Enums.alarmType | null
    title?: string | null
    content?: string | null
    created_date?: Date | string | null
    updated_date?: Date | string | null
  }

  export type AlarmUncheckedCreateWithoutAccountInput = {
    id?: number
    type?: $Enums.alarmType | null
    title?: string | null
    content?: string | null
    created_date?: Date | string | null
    updated_date?: Date | string | null
  }

  export type AlarmCreateOrConnectWithoutAccountInput = {
    where: AlarmWhereUniqueInput
    create: XOR<AlarmCreateWithoutAccountInput, AlarmUncheckedCreateWithoutAccountInput>
  }

  export type AlarmCreateManyAccountInputEnvelope = {
    data: AlarmCreateManyAccountInput | AlarmCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type AccountMissionCreateWithoutAccountInput = {
    success?: $Enums.MissionStatus | null
    mission: MissionCreateNestedOneWithoutAccountMissionsInput
  }

  export type AccountMissionUncheckedCreateWithoutAccountInput = {
    Mission_id: bigint | number
    success?: $Enums.MissionStatus | null
  }

  export type AccountMissionCreateOrConnectWithoutAccountInput = {
    where: AccountMissionWhereUniqueInput
    create: XOR<AccountMissionCreateWithoutAccountInput, AccountMissionUncheckedCreateWithoutAccountInput>
  }

  export type AccountMissionCreateManyAccountInputEnvelope = {
    data: AccountMissionCreateManyAccountInput | AccountMissionCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type ReviewUpsertWithWhereUniqueWithoutAccountInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutAccountInput, ReviewUncheckedUpdateWithoutAccountInput>
    create: XOR<ReviewCreateWithoutAccountInput, ReviewUncheckedCreateWithoutAccountInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutAccountInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutAccountInput, ReviewUncheckedUpdateWithoutAccountInput>
  }

  export type ReviewUpdateManyWithWhereWithoutAccountInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutAccountInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: BigIntFilter<"Review"> | bigint | number
    Restaurant_id?: BigIntFilter<"Review"> | bigint | number
    Account_id?: StringFilter<"Review"> | string
    score?: IntNullableFilter<"Review"> | number | null
    picture?: StringNullableFilter<"Review"> | string | null
    content?: StringNullableFilter<"Review"> | string | null
    created_date?: DateTimeFilter<"Review"> | Date | string
    updated_date?: DateTimeNullableFilter<"Review"> | Date | string | null
  }

  export type InquiryUpsertWithWhereUniqueWithoutAccountInput = {
    where: InquiryWhereUniqueInput
    update: XOR<InquiryUpdateWithoutAccountInput, InquiryUncheckedUpdateWithoutAccountInput>
    create: XOR<InquiryCreateWithoutAccountInput, InquiryUncheckedCreateWithoutAccountInput>
  }

  export type InquiryUpdateWithWhereUniqueWithoutAccountInput = {
    where: InquiryWhereUniqueInput
    data: XOR<InquiryUpdateWithoutAccountInput, InquiryUncheckedUpdateWithoutAccountInput>
  }

  export type InquiryUpdateManyWithWhereWithoutAccountInput = {
    where: InquiryScalarWhereInput
    data: XOR<InquiryUpdateManyMutationInput, InquiryUncheckedUpdateManyWithoutAccountInput>
  }

  export type InquiryScalarWhereInput = {
    AND?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
    OR?: InquiryScalarWhereInput[]
    NOT?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
    id?: IntFilter<"Inquiry"> | number
    Account_id?: StringFilter<"Inquiry"> | string
    title?: StringNullableFilter<"Inquiry"> | string | null
    image?: StringNullableFilter<"Inquiry"> | string | null
    content?: StringNullableFilter<"Inquiry"> | string | null
    waiting?: IntNullableFilter<"Inquiry"> | number | null
    created_date?: DateTimeNullableFilter<"Inquiry"> | Date | string | null
    type?: StringNullableFilter<"Inquiry"> | string | null
  }

  export type AlarmUpsertWithWhereUniqueWithoutAccountInput = {
    where: AlarmWhereUniqueInput
    update: XOR<AlarmUpdateWithoutAccountInput, AlarmUncheckedUpdateWithoutAccountInput>
    create: XOR<AlarmCreateWithoutAccountInput, AlarmUncheckedCreateWithoutAccountInput>
  }

  export type AlarmUpdateWithWhereUniqueWithoutAccountInput = {
    where: AlarmWhereUniqueInput
    data: XOR<AlarmUpdateWithoutAccountInput, AlarmUncheckedUpdateWithoutAccountInput>
  }

  export type AlarmUpdateManyWithWhereWithoutAccountInput = {
    where: AlarmScalarWhereInput
    data: XOR<AlarmUpdateManyMutationInput, AlarmUncheckedUpdateManyWithoutAccountInput>
  }

  export type AlarmScalarWhereInput = {
    AND?: AlarmScalarWhereInput | AlarmScalarWhereInput[]
    OR?: AlarmScalarWhereInput[]
    NOT?: AlarmScalarWhereInput | AlarmScalarWhereInput[]
    id?: IntFilter<"Alarm"> | number
    Account_id?: StringFilter<"Alarm"> | string
    type?: EnumalarmTypeNullableFilter<"Alarm"> | $Enums.alarmType | null
    title?: StringNullableFilter<"Alarm"> | string | null
    content?: StringNullableFilter<"Alarm"> | string | null
    created_date?: DateTimeNullableFilter<"Alarm"> | Date | string | null
    updated_date?: DateTimeNullableFilter<"Alarm"> | Date | string | null
  }

  export type AccountMissionUpsertWithWhereUniqueWithoutAccountInput = {
    where: AccountMissionWhereUniqueInput
    update: XOR<AccountMissionUpdateWithoutAccountInput, AccountMissionUncheckedUpdateWithoutAccountInput>
    create: XOR<AccountMissionCreateWithoutAccountInput, AccountMissionUncheckedCreateWithoutAccountInput>
  }

  export type AccountMissionUpdateWithWhereUniqueWithoutAccountInput = {
    where: AccountMissionWhereUniqueInput
    data: XOR<AccountMissionUpdateWithoutAccountInput, AccountMissionUncheckedUpdateWithoutAccountInput>
  }

  export type AccountMissionUpdateManyWithWhereWithoutAccountInput = {
    where: AccountMissionScalarWhereInput
    data: XOR<AccountMissionUpdateManyMutationInput, AccountMissionUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountMissionScalarWhereInput = {
    AND?: AccountMissionScalarWhereInput | AccountMissionScalarWhereInput[]
    OR?: AccountMissionScalarWhereInput[]
    NOT?: AccountMissionScalarWhereInput | AccountMissionScalarWhereInput[]
    Account_id?: StringFilter<"AccountMission"> | string
    Mission_id?: BigIntFilter<"AccountMission"> | bigint | number
    success?: EnumMissionStatusNullableFilter<"AccountMission"> | $Enums.MissionStatus | null
  }

  export type ReviewCreateWithoutRestaurantInput = {
    id?: bigint | number
    score?: number | null
    picture?: string | null
    content?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
    account: AccountCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutRestaurantInput = {
    id?: bigint | number
    Account_id: string
    score?: number | null
    picture?: string | null
    content?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
  }

  export type ReviewCreateOrConnectWithoutRestaurantInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutRestaurantInput, ReviewUncheckedCreateWithoutRestaurantInput>
  }

  export type ReviewCreateManyRestaurantInputEnvelope = {
    data: ReviewCreateManyRestaurantInput | ReviewCreateManyRestaurantInput[]
    skipDuplicates?: boolean
  }

  export type MissionCreateWithoutRestaurantInput = {
    id?: bigint | number
    mission_name: string
    deadline?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    count?: number | null
    mission_point?: number | null
    accountMissions?: AccountMissionCreateNestedManyWithoutMissionInput
  }

  export type MissionUncheckedCreateWithoutRestaurantInput = {
    id?: bigint | number
    mission_name: string
    deadline?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    count?: number | null
    mission_point?: number | null
    accountMissions?: AccountMissionUncheckedCreateNestedManyWithoutMissionInput
  }

  export type MissionCreateOrConnectWithoutRestaurantInput = {
    where: MissionWhereUniqueInput
    create: XOR<MissionCreateWithoutRestaurantInput, MissionUncheckedCreateWithoutRestaurantInput>
  }

  export type MissionCreateManyRestaurantInputEnvelope = {
    data: MissionCreateManyRestaurantInput | MissionCreateManyRestaurantInput[]
    skipDuplicates?: boolean
  }

  export type ReviewUpsertWithWhereUniqueWithoutRestaurantInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutRestaurantInput, ReviewUncheckedUpdateWithoutRestaurantInput>
    create: XOR<ReviewCreateWithoutRestaurantInput, ReviewUncheckedCreateWithoutRestaurantInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutRestaurantInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutRestaurantInput, ReviewUncheckedUpdateWithoutRestaurantInput>
  }

  export type ReviewUpdateManyWithWhereWithoutRestaurantInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutRestaurantInput>
  }

  export type MissionUpsertWithWhereUniqueWithoutRestaurantInput = {
    where: MissionWhereUniqueInput
    update: XOR<MissionUpdateWithoutRestaurantInput, MissionUncheckedUpdateWithoutRestaurantInput>
    create: XOR<MissionCreateWithoutRestaurantInput, MissionUncheckedCreateWithoutRestaurantInput>
  }

  export type MissionUpdateWithWhereUniqueWithoutRestaurantInput = {
    where: MissionWhereUniqueInput
    data: XOR<MissionUpdateWithoutRestaurantInput, MissionUncheckedUpdateWithoutRestaurantInput>
  }

  export type MissionUpdateManyWithWhereWithoutRestaurantInput = {
    where: MissionScalarWhereInput
    data: XOR<MissionUpdateManyMutationInput, MissionUncheckedUpdateManyWithoutRestaurantInput>
  }

  export type MissionScalarWhereInput = {
    AND?: MissionScalarWhereInput | MissionScalarWhereInput[]
    OR?: MissionScalarWhereInput[]
    NOT?: MissionScalarWhereInput | MissionScalarWhereInput[]
    id?: BigIntFilter<"Mission"> | bigint | number
    Restaurant_id?: BigIntFilter<"Mission"> | bigint | number
    mission_name?: StringFilter<"Mission"> | string
    deadline?: DateTimeNullableFilter<"Mission"> | Date | string | null
    created_date?: DateTimeFilter<"Mission"> | Date | string
    updated_date?: DateTimeNullableFilter<"Mission"> | Date | string | null
    count?: IntNullableFilter<"Mission"> | number | null
    mission_point?: IntNullableFilter<"Mission"> | number | null
  }

  export type RestaurantCreateWithoutReviewsInput = {
    id?: bigint | number
    restaurant_name: string
    address: string
    type?: string | null
    picture?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
    inactive_date?: Date | string | null
    status?: string | null
    phone_number?: string | null
    missions?: MissionCreateNestedManyWithoutRestaurantInput
  }

  export type RestaurantUncheckedCreateWithoutReviewsInput = {
    id?: bigint | number
    restaurant_name: string
    address: string
    type?: string | null
    picture?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
    inactive_date?: Date | string | null
    status?: string | null
    phone_number?: string | null
    missions?: MissionUncheckedCreateNestedManyWithoutRestaurantInput
  }

  export type RestaurantCreateOrConnectWithoutReviewsInput = {
    where: RestaurantWhereUniqueInput
    create: XOR<RestaurantCreateWithoutReviewsInput, RestaurantUncheckedCreateWithoutReviewsInput>
  }

  export type AccountCreateWithoutReviewsInput = {
    id?: string
    password: string
    name: string
    birthday: Date | string
    address: string
    nickname: string
    email: string
    gender?: number | null
    phone_number?: string | null
    status?: string | null
    inactive_date?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    savepoint?: number | null
    location_O: number
    marketing_O: number
    event_reception: number
    review_reception: number
    inquiry_reception: number
    korean_food?: number | null
    japan_food?: number | null
    china_food?: number | null
    western_food?: number | null
    chicken?: number | null
    snack_food?: number | null
    meat?: number | null
    lunchbox?: number | null
    LNS?: number | null
    fastfood?: number | null
    dessert?: number | null
    asian_food?: number | null
    inquiries?: InquiryCreateNestedManyWithoutAccountInput
    alarms?: AlarmCreateNestedManyWithoutAccountInput
    accountMissions?: AccountMissionCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutReviewsInput = {
    id?: string
    password: string
    name: string
    birthday: Date | string
    address: string
    nickname: string
    email: string
    gender?: number | null
    phone_number?: string | null
    status?: string | null
    inactive_date?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    savepoint?: number | null
    location_O: number
    marketing_O: number
    event_reception: number
    review_reception: number
    inquiry_reception: number
    korean_food?: number | null
    japan_food?: number | null
    china_food?: number | null
    western_food?: number | null
    chicken?: number | null
    snack_food?: number | null
    meat?: number | null
    lunchbox?: number | null
    LNS?: number | null
    fastfood?: number | null
    dessert?: number | null
    asian_food?: number | null
    inquiries?: InquiryUncheckedCreateNestedManyWithoutAccountInput
    alarms?: AlarmUncheckedCreateNestedManyWithoutAccountInput
    accountMissions?: AccountMissionUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutReviewsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutReviewsInput, AccountUncheckedCreateWithoutReviewsInput>
  }

  export type RestaurantUpsertWithoutReviewsInput = {
    update: XOR<RestaurantUpdateWithoutReviewsInput, RestaurantUncheckedUpdateWithoutReviewsInput>
    create: XOR<RestaurantCreateWithoutReviewsInput, RestaurantUncheckedCreateWithoutReviewsInput>
    where?: RestaurantWhereInput
  }

  export type RestaurantUpdateToOneWithWhereWithoutReviewsInput = {
    where?: RestaurantWhereInput
    data: XOR<RestaurantUpdateWithoutReviewsInput, RestaurantUncheckedUpdateWithoutReviewsInput>
  }

  export type RestaurantUpdateWithoutReviewsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    restaurant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    missions?: MissionUpdateManyWithoutRestaurantNestedInput
  }

  export type RestaurantUncheckedUpdateWithoutReviewsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    restaurant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    missions?: MissionUncheckedUpdateManyWithoutRestaurantNestedInput
  }

  export type AccountUpsertWithoutReviewsInput = {
    update: XOR<AccountUpdateWithoutReviewsInput, AccountUncheckedUpdateWithoutReviewsInput>
    create: XOR<AccountCreateWithoutReviewsInput, AccountUncheckedCreateWithoutReviewsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutReviewsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutReviewsInput, AccountUncheckedUpdateWithoutReviewsInput>
  }

  export type AccountUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    savepoint?: NullableIntFieldUpdateOperationsInput | number | null
    location_O?: IntFieldUpdateOperationsInput | number
    marketing_O?: IntFieldUpdateOperationsInput | number
    event_reception?: IntFieldUpdateOperationsInput | number
    review_reception?: IntFieldUpdateOperationsInput | number
    inquiry_reception?: IntFieldUpdateOperationsInput | number
    korean_food?: NullableIntFieldUpdateOperationsInput | number | null
    japan_food?: NullableIntFieldUpdateOperationsInput | number | null
    china_food?: NullableIntFieldUpdateOperationsInput | number | null
    western_food?: NullableIntFieldUpdateOperationsInput | number | null
    chicken?: NullableIntFieldUpdateOperationsInput | number | null
    snack_food?: NullableIntFieldUpdateOperationsInput | number | null
    meat?: NullableIntFieldUpdateOperationsInput | number | null
    lunchbox?: NullableIntFieldUpdateOperationsInput | number | null
    LNS?: NullableIntFieldUpdateOperationsInput | number | null
    fastfood?: NullableIntFieldUpdateOperationsInput | number | null
    dessert?: NullableIntFieldUpdateOperationsInput | number | null
    asian_food?: NullableIntFieldUpdateOperationsInput | number | null
    inquiries?: InquiryUpdateManyWithoutAccountNestedInput
    alarms?: AlarmUpdateManyWithoutAccountNestedInput
    accountMissions?: AccountMissionUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    savepoint?: NullableIntFieldUpdateOperationsInput | number | null
    location_O?: IntFieldUpdateOperationsInput | number
    marketing_O?: IntFieldUpdateOperationsInput | number
    event_reception?: IntFieldUpdateOperationsInput | number
    review_reception?: IntFieldUpdateOperationsInput | number
    inquiry_reception?: IntFieldUpdateOperationsInput | number
    korean_food?: NullableIntFieldUpdateOperationsInput | number | null
    japan_food?: NullableIntFieldUpdateOperationsInput | number | null
    china_food?: NullableIntFieldUpdateOperationsInput | number | null
    western_food?: NullableIntFieldUpdateOperationsInput | number | null
    chicken?: NullableIntFieldUpdateOperationsInput | number | null
    snack_food?: NullableIntFieldUpdateOperationsInput | number | null
    meat?: NullableIntFieldUpdateOperationsInput | number | null
    lunchbox?: NullableIntFieldUpdateOperationsInput | number | null
    LNS?: NullableIntFieldUpdateOperationsInput | number | null
    fastfood?: NullableIntFieldUpdateOperationsInput | number | null
    dessert?: NullableIntFieldUpdateOperationsInput | number | null
    asian_food?: NullableIntFieldUpdateOperationsInput | number | null
    inquiries?: InquiryUncheckedUpdateManyWithoutAccountNestedInput
    alarms?: AlarmUncheckedUpdateManyWithoutAccountNestedInput
    accountMissions?: AccountMissionUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type RestaurantCreateWithoutMissionsInput = {
    id?: bigint | number
    restaurant_name: string
    address: string
    type?: string | null
    picture?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
    inactive_date?: Date | string | null
    status?: string | null
    phone_number?: string | null
    reviews?: ReviewCreateNestedManyWithoutRestaurantInput
  }

  export type RestaurantUncheckedCreateWithoutMissionsInput = {
    id?: bigint | number
    restaurant_name: string
    address: string
    type?: string | null
    picture?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
    inactive_date?: Date | string | null
    status?: string | null
    phone_number?: string | null
    reviews?: ReviewUncheckedCreateNestedManyWithoutRestaurantInput
  }

  export type RestaurantCreateOrConnectWithoutMissionsInput = {
    where: RestaurantWhereUniqueInput
    create: XOR<RestaurantCreateWithoutMissionsInput, RestaurantUncheckedCreateWithoutMissionsInput>
  }

  export type AccountMissionCreateWithoutMissionInput = {
    success?: $Enums.MissionStatus | null
    account: AccountCreateNestedOneWithoutAccountMissionsInput
  }

  export type AccountMissionUncheckedCreateWithoutMissionInput = {
    Account_id: string
    success?: $Enums.MissionStatus | null
  }

  export type AccountMissionCreateOrConnectWithoutMissionInput = {
    where: AccountMissionWhereUniqueInput
    create: XOR<AccountMissionCreateWithoutMissionInput, AccountMissionUncheckedCreateWithoutMissionInput>
  }

  export type AccountMissionCreateManyMissionInputEnvelope = {
    data: AccountMissionCreateManyMissionInput | AccountMissionCreateManyMissionInput[]
    skipDuplicates?: boolean
  }

  export type RestaurantUpsertWithoutMissionsInput = {
    update: XOR<RestaurantUpdateWithoutMissionsInput, RestaurantUncheckedUpdateWithoutMissionsInput>
    create: XOR<RestaurantCreateWithoutMissionsInput, RestaurantUncheckedCreateWithoutMissionsInput>
    where?: RestaurantWhereInput
  }

  export type RestaurantUpdateToOneWithWhereWithoutMissionsInput = {
    where?: RestaurantWhereInput
    data: XOR<RestaurantUpdateWithoutMissionsInput, RestaurantUncheckedUpdateWithoutMissionsInput>
  }

  export type RestaurantUpdateWithoutMissionsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    restaurant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    reviews?: ReviewUpdateManyWithoutRestaurantNestedInput
  }

  export type RestaurantUncheckedUpdateWithoutMissionsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    restaurant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    reviews?: ReviewUncheckedUpdateManyWithoutRestaurantNestedInput
  }

  export type AccountMissionUpsertWithWhereUniqueWithoutMissionInput = {
    where: AccountMissionWhereUniqueInput
    update: XOR<AccountMissionUpdateWithoutMissionInput, AccountMissionUncheckedUpdateWithoutMissionInput>
    create: XOR<AccountMissionCreateWithoutMissionInput, AccountMissionUncheckedCreateWithoutMissionInput>
  }

  export type AccountMissionUpdateWithWhereUniqueWithoutMissionInput = {
    where: AccountMissionWhereUniqueInput
    data: XOR<AccountMissionUpdateWithoutMissionInput, AccountMissionUncheckedUpdateWithoutMissionInput>
  }

  export type AccountMissionUpdateManyWithWhereWithoutMissionInput = {
    where: AccountMissionScalarWhereInput
    data: XOR<AccountMissionUpdateManyMutationInput, AccountMissionUncheckedUpdateManyWithoutMissionInput>
  }

  export type AccountCreateWithoutInquiriesInput = {
    id?: string
    password: string
    name: string
    birthday: Date | string
    address: string
    nickname: string
    email: string
    gender?: number | null
    phone_number?: string | null
    status?: string | null
    inactive_date?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    savepoint?: number | null
    location_O: number
    marketing_O: number
    event_reception: number
    review_reception: number
    inquiry_reception: number
    korean_food?: number | null
    japan_food?: number | null
    china_food?: number | null
    western_food?: number | null
    chicken?: number | null
    snack_food?: number | null
    meat?: number | null
    lunchbox?: number | null
    LNS?: number | null
    fastfood?: number | null
    dessert?: number | null
    asian_food?: number | null
    reviews?: ReviewCreateNestedManyWithoutAccountInput
    alarms?: AlarmCreateNestedManyWithoutAccountInput
    accountMissions?: AccountMissionCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutInquiriesInput = {
    id?: string
    password: string
    name: string
    birthday: Date | string
    address: string
    nickname: string
    email: string
    gender?: number | null
    phone_number?: string | null
    status?: string | null
    inactive_date?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    savepoint?: number | null
    location_O: number
    marketing_O: number
    event_reception: number
    review_reception: number
    inquiry_reception: number
    korean_food?: number | null
    japan_food?: number | null
    china_food?: number | null
    western_food?: number | null
    chicken?: number | null
    snack_food?: number | null
    meat?: number | null
    lunchbox?: number | null
    LNS?: number | null
    fastfood?: number | null
    dessert?: number | null
    asian_food?: number | null
    reviews?: ReviewUncheckedCreateNestedManyWithoutAccountInput
    alarms?: AlarmUncheckedCreateNestedManyWithoutAccountInput
    accountMissions?: AccountMissionUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutInquiriesInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutInquiriesInput, AccountUncheckedCreateWithoutInquiriesInput>
  }

  export type AccountUpsertWithoutInquiriesInput = {
    update: XOR<AccountUpdateWithoutInquiriesInput, AccountUncheckedUpdateWithoutInquiriesInput>
    create: XOR<AccountCreateWithoutInquiriesInput, AccountUncheckedCreateWithoutInquiriesInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutInquiriesInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutInquiriesInput, AccountUncheckedUpdateWithoutInquiriesInput>
  }

  export type AccountUpdateWithoutInquiriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    savepoint?: NullableIntFieldUpdateOperationsInput | number | null
    location_O?: IntFieldUpdateOperationsInput | number
    marketing_O?: IntFieldUpdateOperationsInput | number
    event_reception?: IntFieldUpdateOperationsInput | number
    review_reception?: IntFieldUpdateOperationsInput | number
    inquiry_reception?: IntFieldUpdateOperationsInput | number
    korean_food?: NullableIntFieldUpdateOperationsInput | number | null
    japan_food?: NullableIntFieldUpdateOperationsInput | number | null
    china_food?: NullableIntFieldUpdateOperationsInput | number | null
    western_food?: NullableIntFieldUpdateOperationsInput | number | null
    chicken?: NullableIntFieldUpdateOperationsInput | number | null
    snack_food?: NullableIntFieldUpdateOperationsInput | number | null
    meat?: NullableIntFieldUpdateOperationsInput | number | null
    lunchbox?: NullableIntFieldUpdateOperationsInput | number | null
    LNS?: NullableIntFieldUpdateOperationsInput | number | null
    fastfood?: NullableIntFieldUpdateOperationsInput | number | null
    dessert?: NullableIntFieldUpdateOperationsInput | number | null
    asian_food?: NullableIntFieldUpdateOperationsInput | number | null
    reviews?: ReviewUpdateManyWithoutAccountNestedInput
    alarms?: AlarmUpdateManyWithoutAccountNestedInput
    accountMissions?: AccountMissionUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutInquiriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    savepoint?: NullableIntFieldUpdateOperationsInput | number | null
    location_O?: IntFieldUpdateOperationsInput | number
    marketing_O?: IntFieldUpdateOperationsInput | number
    event_reception?: IntFieldUpdateOperationsInput | number
    review_reception?: IntFieldUpdateOperationsInput | number
    inquiry_reception?: IntFieldUpdateOperationsInput | number
    korean_food?: NullableIntFieldUpdateOperationsInput | number | null
    japan_food?: NullableIntFieldUpdateOperationsInput | number | null
    china_food?: NullableIntFieldUpdateOperationsInput | number | null
    western_food?: NullableIntFieldUpdateOperationsInput | number | null
    chicken?: NullableIntFieldUpdateOperationsInput | number | null
    snack_food?: NullableIntFieldUpdateOperationsInput | number | null
    meat?: NullableIntFieldUpdateOperationsInput | number | null
    lunchbox?: NullableIntFieldUpdateOperationsInput | number | null
    LNS?: NullableIntFieldUpdateOperationsInput | number | null
    fastfood?: NullableIntFieldUpdateOperationsInput | number | null
    dessert?: NullableIntFieldUpdateOperationsInput | number | null
    asian_food?: NullableIntFieldUpdateOperationsInput | number | null
    reviews?: ReviewUncheckedUpdateManyWithoutAccountNestedInput
    alarms?: AlarmUncheckedUpdateManyWithoutAccountNestedInput
    accountMissions?: AccountMissionUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateWithoutAlarmsInput = {
    id?: string
    password: string
    name: string
    birthday: Date | string
    address: string
    nickname: string
    email: string
    gender?: number | null
    phone_number?: string | null
    status?: string | null
    inactive_date?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    savepoint?: number | null
    location_O: number
    marketing_O: number
    event_reception: number
    review_reception: number
    inquiry_reception: number
    korean_food?: number | null
    japan_food?: number | null
    china_food?: number | null
    western_food?: number | null
    chicken?: number | null
    snack_food?: number | null
    meat?: number | null
    lunchbox?: number | null
    LNS?: number | null
    fastfood?: number | null
    dessert?: number | null
    asian_food?: number | null
    reviews?: ReviewCreateNestedManyWithoutAccountInput
    inquiries?: InquiryCreateNestedManyWithoutAccountInput
    accountMissions?: AccountMissionCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutAlarmsInput = {
    id?: string
    password: string
    name: string
    birthday: Date | string
    address: string
    nickname: string
    email: string
    gender?: number | null
    phone_number?: string | null
    status?: string | null
    inactive_date?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    savepoint?: number | null
    location_O: number
    marketing_O: number
    event_reception: number
    review_reception: number
    inquiry_reception: number
    korean_food?: number | null
    japan_food?: number | null
    china_food?: number | null
    western_food?: number | null
    chicken?: number | null
    snack_food?: number | null
    meat?: number | null
    lunchbox?: number | null
    LNS?: number | null
    fastfood?: number | null
    dessert?: number | null
    asian_food?: number | null
    reviews?: ReviewUncheckedCreateNestedManyWithoutAccountInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutAccountInput
    accountMissions?: AccountMissionUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutAlarmsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutAlarmsInput, AccountUncheckedCreateWithoutAlarmsInput>
  }

  export type AccountUpsertWithoutAlarmsInput = {
    update: XOR<AccountUpdateWithoutAlarmsInput, AccountUncheckedUpdateWithoutAlarmsInput>
    create: XOR<AccountCreateWithoutAlarmsInput, AccountUncheckedCreateWithoutAlarmsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutAlarmsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutAlarmsInput, AccountUncheckedUpdateWithoutAlarmsInput>
  }

  export type AccountUpdateWithoutAlarmsInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    savepoint?: NullableIntFieldUpdateOperationsInput | number | null
    location_O?: IntFieldUpdateOperationsInput | number
    marketing_O?: IntFieldUpdateOperationsInput | number
    event_reception?: IntFieldUpdateOperationsInput | number
    review_reception?: IntFieldUpdateOperationsInput | number
    inquiry_reception?: IntFieldUpdateOperationsInput | number
    korean_food?: NullableIntFieldUpdateOperationsInput | number | null
    japan_food?: NullableIntFieldUpdateOperationsInput | number | null
    china_food?: NullableIntFieldUpdateOperationsInput | number | null
    western_food?: NullableIntFieldUpdateOperationsInput | number | null
    chicken?: NullableIntFieldUpdateOperationsInput | number | null
    snack_food?: NullableIntFieldUpdateOperationsInput | number | null
    meat?: NullableIntFieldUpdateOperationsInput | number | null
    lunchbox?: NullableIntFieldUpdateOperationsInput | number | null
    LNS?: NullableIntFieldUpdateOperationsInput | number | null
    fastfood?: NullableIntFieldUpdateOperationsInput | number | null
    dessert?: NullableIntFieldUpdateOperationsInput | number | null
    asian_food?: NullableIntFieldUpdateOperationsInput | number | null
    reviews?: ReviewUpdateManyWithoutAccountNestedInput
    inquiries?: InquiryUpdateManyWithoutAccountNestedInput
    accountMissions?: AccountMissionUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutAlarmsInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    savepoint?: NullableIntFieldUpdateOperationsInput | number | null
    location_O?: IntFieldUpdateOperationsInput | number
    marketing_O?: IntFieldUpdateOperationsInput | number
    event_reception?: IntFieldUpdateOperationsInput | number
    review_reception?: IntFieldUpdateOperationsInput | number
    inquiry_reception?: IntFieldUpdateOperationsInput | number
    korean_food?: NullableIntFieldUpdateOperationsInput | number | null
    japan_food?: NullableIntFieldUpdateOperationsInput | number | null
    china_food?: NullableIntFieldUpdateOperationsInput | number | null
    western_food?: NullableIntFieldUpdateOperationsInput | number | null
    chicken?: NullableIntFieldUpdateOperationsInput | number | null
    snack_food?: NullableIntFieldUpdateOperationsInput | number | null
    meat?: NullableIntFieldUpdateOperationsInput | number | null
    lunchbox?: NullableIntFieldUpdateOperationsInput | number | null
    LNS?: NullableIntFieldUpdateOperationsInput | number | null
    fastfood?: NullableIntFieldUpdateOperationsInput | number | null
    dessert?: NullableIntFieldUpdateOperationsInput | number | null
    asian_food?: NullableIntFieldUpdateOperationsInput | number | null
    reviews?: ReviewUncheckedUpdateManyWithoutAccountNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutAccountNestedInput
    accountMissions?: AccountMissionUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateWithoutAccountMissionsInput = {
    id?: string
    password: string
    name: string
    birthday: Date | string
    address: string
    nickname: string
    email: string
    gender?: number | null
    phone_number?: string | null
    status?: string | null
    inactive_date?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    savepoint?: number | null
    location_O: number
    marketing_O: number
    event_reception: number
    review_reception: number
    inquiry_reception: number
    korean_food?: number | null
    japan_food?: number | null
    china_food?: number | null
    western_food?: number | null
    chicken?: number | null
    snack_food?: number | null
    meat?: number | null
    lunchbox?: number | null
    LNS?: number | null
    fastfood?: number | null
    dessert?: number | null
    asian_food?: number | null
    reviews?: ReviewCreateNestedManyWithoutAccountInput
    inquiries?: InquiryCreateNestedManyWithoutAccountInput
    alarms?: AlarmCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutAccountMissionsInput = {
    id?: string
    password: string
    name: string
    birthday: Date | string
    address: string
    nickname: string
    email: string
    gender?: number | null
    phone_number?: string | null
    status?: string | null
    inactive_date?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    savepoint?: number | null
    location_O: number
    marketing_O: number
    event_reception: number
    review_reception: number
    inquiry_reception: number
    korean_food?: number | null
    japan_food?: number | null
    china_food?: number | null
    western_food?: number | null
    chicken?: number | null
    snack_food?: number | null
    meat?: number | null
    lunchbox?: number | null
    LNS?: number | null
    fastfood?: number | null
    dessert?: number | null
    asian_food?: number | null
    reviews?: ReviewUncheckedCreateNestedManyWithoutAccountInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutAccountInput
    alarms?: AlarmUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutAccountMissionsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutAccountMissionsInput, AccountUncheckedCreateWithoutAccountMissionsInput>
  }

  export type MissionCreateWithoutAccountMissionsInput = {
    id?: bigint | number
    mission_name: string
    deadline?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    count?: number | null
    mission_point?: number | null
    restaurant: RestaurantCreateNestedOneWithoutMissionsInput
  }

  export type MissionUncheckedCreateWithoutAccountMissionsInput = {
    id?: bigint | number
    Restaurant_id: bigint | number
    mission_name: string
    deadline?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    count?: number | null
    mission_point?: number | null
  }

  export type MissionCreateOrConnectWithoutAccountMissionsInput = {
    where: MissionWhereUniqueInput
    create: XOR<MissionCreateWithoutAccountMissionsInput, MissionUncheckedCreateWithoutAccountMissionsInput>
  }

  export type AccountUpsertWithoutAccountMissionsInput = {
    update: XOR<AccountUpdateWithoutAccountMissionsInput, AccountUncheckedUpdateWithoutAccountMissionsInput>
    create: XOR<AccountCreateWithoutAccountMissionsInput, AccountUncheckedCreateWithoutAccountMissionsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutAccountMissionsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutAccountMissionsInput, AccountUncheckedUpdateWithoutAccountMissionsInput>
  }

  export type AccountUpdateWithoutAccountMissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    savepoint?: NullableIntFieldUpdateOperationsInput | number | null
    location_O?: IntFieldUpdateOperationsInput | number
    marketing_O?: IntFieldUpdateOperationsInput | number
    event_reception?: IntFieldUpdateOperationsInput | number
    review_reception?: IntFieldUpdateOperationsInput | number
    inquiry_reception?: IntFieldUpdateOperationsInput | number
    korean_food?: NullableIntFieldUpdateOperationsInput | number | null
    japan_food?: NullableIntFieldUpdateOperationsInput | number | null
    china_food?: NullableIntFieldUpdateOperationsInput | number | null
    western_food?: NullableIntFieldUpdateOperationsInput | number | null
    chicken?: NullableIntFieldUpdateOperationsInput | number | null
    snack_food?: NullableIntFieldUpdateOperationsInput | number | null
    meat?: NullableIntFieldUpdateOperationsInput | number | null
    lunchbox?: NullableIntFieldUpdateOperationsInput | number | null
    LNS?: NullableIntFieldUpdateOperationsInput | number | null
    fastfood?: NullableIntFieldUpdateOperationsInput | number | null
    dessert?: NullableIntFieldUpdateOperationsInput | number | null
    asian_food?: NullableIntFieldUpdateOperationsInput | number | null
    reviews?: ReviewUpdateManyWithoutAccountNestedInput
    inquiries?: InquiryUpdateManyWithoutAccountNestedInput
    alarms?: AlarmUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutAccountMissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    inactive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    savepoint?: NullableIntFieldUpdateOperationsInput | number | null
    location_O?: IntFieldUpdateOperationsInput | number
    marketing_O?: IntFieldUpdateOperationsInput | number
    event_reception?: IntFieldUpdateOperationsInput | number
    review_reception?: IntFieldUpdateOperationsInput | number
    inquiry_reception?: IntFieldUpdateOperationsInput | number
    korean_food?: NullableIntFieldUpdateOperationsInput | number | null
    japan_food?: NullableIntFieldUpdateOperationsInput | number | null
    china_food?: NullableIntFieldUpdateOperationsInput | number | null
    western_food?: NullableIntFieldUpdateOperationsInput | number | null
    chicken?: NullableIntFieldUpdateOperationsInput | number | null
    snack_food?: NullableIntFieldUpdateOperationsInput | number | null
    meat?: NullableIntFieldUpdateOperationsInput | number | null
    lunchbox?: NullableIntFieldUpdateOperationsInput | number | null
    LNS?: NullableIntFieldUpdateOperationsInput | number | null
    fastfood?: NullableIntFieldUpdateOperationsInput | number | null
    dessert?: NullableIntFieldUpdateOperationsInput | number | null
    asian_food?: NullableIntFieldUpdateOperationsInput | number | null
    reviews?: ReviewUncheckedUpdateManyWithoutAccountNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutAccountNestedInput
    alarms?: AlarmUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type MissionUpsertWithoutAccountMissionsInput = {
    update: XOR<MissionUpdateWithoutAccountMissionsInput, MissionUncheckedUpdateWithoutAccountMissionsInput>
    create: XOR<MissionCreateWithoutAccountMissionsInput, MissionUncheckedCreateWithoutAccountMissionsInput>
    where?: MissionWhereInput
  }

  export type MissionUpdateToOneWithWhereWithoutAccountMissionsInput = {
    where?: MissionWhereInput
    data: XOR<MissionUpdateWithoutAccountMissionsInput, MissionUncheckedUpdateWithoutAccountMissionsInput>
  }

  export type MissionUpdateWithoutAccountMissionsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    mission_name?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    mission_point?: NullableIntFieldUpdateOperationsInput | number | null
    restaurant?: RestaurantUpdateOneRequiredWithoutMissionsNestedInput
  }

  export type MissionUncheckedUpdateWithoutAccountMissionsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    Restaurant_id?: BigIntFieldUpdateOperationsInput | bigint | number
    mission_name?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    mission_point?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReviewCreateManyAccountInput = {
    id?: bigint | number
    Restaurant_id: bigint | number
    score?: number | null
    picture?: string | null
    content?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
  }

  export type InquiryCreateManyAccountInput = {
    id?: number
    title?: string | null
    image?: string | null
    content?: string | null
    waiting?: number | null
    created_date?: Date | string | null
    type?: string | null
  }

  export type AlarmCreateManyAccountInput = {
    id?: number
    type?: $Enums.alarmType | null
    title?: string | null
    content?: string | null
    created_date?: Date | string | null
    updated_date?: Date | string | null
  }

  export type AccountMissionCreateManyAccountInput = {
    Mission_id: bigint | number
    success?: $Enums.MissionStatus | null
  }

  export type ReviewUpdateWithoutAccountInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    restaurant?: RestaurantUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutAccountInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    Restaurant_id?: BigIntFieldUpdateOperationsInput | bigint | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReviewUncheckedUpdateManyWithoutAccountInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    Restaurant_id?: BigIntFieldUpdateOperationsInput | bigint | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InquiryUpdateWithoutAccountInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    waiting?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InquiryUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    waiting?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InquiryUncheckedUpdateManyWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    waiting?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlarmUpdateWithoutAccountInput = {
    type?: NullableEnumalarmTypeFieldUpdateOperationsInput | $Enums.alarmType | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlarmUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: NullableEnumalarmTypeFieldUpdateOperationsInput | $Enums.alarmType | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlarmUncheckedUpdateManyWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: NullableEnumalarmTypeFieldUpdateOperationsInput | $Enums.alarmType | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountMissionUpdateWithoutAccountInput = {
    success?: NullableEnumMissionStatusFieldUpdateOperationsInput | $Enums.MissionStatus | null
    mission?: MissionUpdateOneRequiredWithoutAccountMissionsNestedInput
  }

  export type AccountMissionUncheckedUpdateWithoutAccountInput = {
    Mission_id?: BigIntFieldUpdateOperationsInput | bigint | number
    success?: NullableEnumMissionStatusFieldUpdateOperationsInput | $Enums.MissionStatus | null
  }

  export type AccountMissionUncheckedUpdateManyWithoutAccountInput = {
    Mission_id?: BigIntFieldUpdateOperationsInput | bigint | number
    success?: NullableEnumMissionStatusFieldUpdateOperationsInput | $Enums.MissionStatus | null
  }

  export type ReviewCreateManyRestaurantInput = {
    id?: bigint | number
    Account_id: string
    score?: number | null
    picture?: string | null
    content?: string | null
    created_date: Date | string
    updated_date?: Date | string | null
  }

  export type MissionCreateManyRestaurantInput = {
    id?: bigint | number
    mission_name: string
    deadline?: Date | string | null
    created_date: Date | string
    updated_date?: Date | string | null
    count?: number | null
    mission_point?: number | null
  }

  export type ReviewUpdateWithoutRestaurantInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    account?: AccountUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutRestaurantInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    Account_id?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReviewUncheckedUpdateManyWithoutRestaurantInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    Account_id?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MissionUpdateWithoutRestaurantInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    mission_name?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    mission_point?: NullableIntFieldUpdateOperationsInput | number | null
    accountMissions?: AccountMissionUpdateManyWithoutMissionNestedInput
  }

  export type MissionUncheckedUpdateWithoutRestaurantInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    mission_name?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    mission_point?: NullableIntFieldUpdateOperationsInput | number | null
    accountMissions?: AccountMissionUncheckedUpdateManyWithoutMissionNestedInput
  }

  export type MissionUncheckedUpdateManyWithoutRestaurantInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    mission_name?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    mission_point?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountMissionCreateManyMissionInput = {
    Account_id: string
    success?: $Enums.MissionStatus | null
  }

  export type AccountMissionUpdateWithoutMissionInput = {
    success?: NullableEnumMissionStatusFieldUpdateOperationsInput | $Enums.MissionStatus | null
    account?: AccountUpdateOneRequiredWithoutAccountMissionsNestedInput
  }

  export type AccountMissionUncheckedUpdateWithoutMissionInput = {
    Account_id?: StringFieldUpdateOperationsInput | string
    success?: NullableEnumMissionStatusFieldUpdateOperationsInput | $Enums.MissionStatus | null
  }

  export type AccountMissionUncheckedUpdateManyWithoutMissionInput = {
    Account_id?: StringFieldUpdateOperationsInput | string
    success?: NullableEnumMissionStatusFieldUpdateOperationsInput | $Enums.MissionStatus | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AccountCountOutputTypeDefaultArgs instead
     */
    export type AccountCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RestaurantCountOutputTypeDefaultArgs instead
     */
    export type RestaurantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RestaurantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MissionCountOutputTypeDefaultArgs instead
     */
    export type MissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RestaurantDefaultArgs instead
     */
    export type RestaurantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RestaurantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReviewDefaultArgs instead
     */
    export type ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReviewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MissionDefaultArgs instead
     */
    export type MissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InquiryDefaultArgs instead
     */
    export type InquiryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InquiryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlarmDefaultArgs instead
     */
    export type AlarmArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlarmDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountMissionDefaultArgs instead
     */
    export type AccountMissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountMissionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}