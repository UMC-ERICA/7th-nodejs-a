
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  password: 'password',
  name: 'name',
  birthday: 'birthday',
  address: 'address',
  nickname: 'nickname',
  email: 'email',
  gender: 'gender',
  phone_number: 'phone_number',
  status: 'status',
  inactive_date: 'inactive_date',
  created_date: 'created_date',
  updated_date: 'updated_date',
  savepoint: 'savepoint',
  location_O: 'location_O',
  marketing_O: 'marketing_O',
  event_reception: 'event_reception',
  review_reception: 'review_reception',
  inquiry_reception: 'inquiry_reception',
  korean_food: 'korean_food',
  japan_food: 'japan_food',
  china_food: 'china_food',
  western_food: 'western_food',
  chicken: 'chicken',
  snack_food: 'snack_food',
  meat: 'meat',
  lunchbox: 'lunchbox',
  LNS: 'LNS',
  fastfood: 'fastfood',
  dessert: 'dessert',
  asian_food: 'asian_food'
};

exports.Prisma.RestaurantScalarFieldEnum = {
  id: 'id',
  restaurant_name: 'restaurant_name',
  address: 'address',
  type: 'type',
  picture: 'picture',
  created_date: 'created_date',
  updated_date: 'updated_date',
  inactive_date: 'inactive_date',
  status: 'status',
  phone_number: 'phone_number'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  Restaurant_id: 'Restaurant_id',
  Account_id: 'Account_id',
  score: 'score',
  picture: 'picture',
  content: 'content',
  created_date: 'created_date',
  updated_date: 'updated_date'
};

exports.Prisma.MissionScalarFieldEnum = {
  id: 'id',
  Restaurant_id: 'Restaurant_id',
  mission_name: 'mission_name',
  deadline: 'deadline',
  created_date: 'created_date',
  updated_date: 'updated_date',
  count: 'count',
  mission_point: 'mission_point'
};

exports.Prisma.InquiryScalarFieldEnum = {
  id: 'id',
  Account_id: 'Account_id',
  title: 'title',
  image: 'image',
  content: 'content',
  waiting: 'waiting',
  created_date: 'created_date',
  type: 'type'
};

exports.Prisma.AlarmScalarFieldEnum = {
  id: 'id',
  Account_id: 'Account_id',
  type: 'type',
  title: 'title',
  content: 'content',
  created_date: 'created_date',
  updated_date: 'updated_date'
};

exports.Prisma.AccountMissionScalarFieldEnum = {
  Account_id: 'Account_id',
  Mission_id: 'Mission_id',
  success: 'success'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.alarmType = exports.$Enums.alarmType = {
  review: 'review',
  mission: 'mission',
  event: 'event'
};

exports.MissionStatus = exports.$Enums.MissionStatus = {
  ongoing: 'ongoing',
  succeed: 'succeed',
  failed: 'failed'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Restaurant: 'Restaurant',
  Review: 'Review',
  Mission: 'Mission',
  Inquiry: 'Inquiry',
  Alarm: 'Alarm',
  AccountMission: 'AccountMission'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
